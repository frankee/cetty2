// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cetty/zurg/slave/slave.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <cetty/protobuf/service/ProtobufServiceRegister.h>
// @@protoc_insertion_point(includes)

namespace cetty {
namespace zurg {
namespace slave {

namespace {

const ::google::protobuf::Descriptor* DiskUsage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiskUsage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetHardwareRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetHardwareRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetHardwareResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetHardwareResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileContentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileContentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileContentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileContentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileChecksumRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileChecksumRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFileChecksumResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFileChecksumResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListProcessesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListProcessesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListProcessesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListProcessesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListProcessesResponse_Process_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListProcessesResponse_Process_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunCommandRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunCommandRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunCommandResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunCommandResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunScriptRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunScriptRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplicationStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplicationStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddApplicationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddApplicationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddApplicationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddApplicationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartApplicationsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartApplicationsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartApplicationsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartApplicationsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopApplicationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopApplicationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopApplicationResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopApplicationResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListApplicationsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListApplicationsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ListApplicationsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListApplicationsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveApplicationsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveApplicationsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveApplicationsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveApplicationsResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ApplicationState_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* SlaveService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cetty_2fzurg_2fslave_2fslave_2eproto() {
  protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cetty/zurg/slave/slave.proto");
  GOOGLE_CHECK(file != NULL);
  DiskUsage_descriptor_ = file->message_type(0);
  static const int DiskUsage_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, mount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, block_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, blocks_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, blocks_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, blocks_avail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, inodes_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, inodes_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, inodes_avail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, fsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, namemax_),
  };
  DiskUsage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiskUsage_descriptor_,
      DiskUsage::default_instance_,
      DiskUsage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskUsage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiskUsage));
  GetHardwareRequest_descriptor_ = file->message_type(1);
  static const int GetHardwareRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHardwareRequest, lshw_),
  };
  GetHardwareRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetHardwareRequest_descriptor_,
      GetHardwareRequest::default_instance_,
      GetHardwareRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHardwareRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHardwareRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetHardwareRequest));
  GetHardwareResponse_descriptor_ = file->message_type(2);
  static const int GetHardwareResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHardwareResponse, lspci_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHardwareResponse, lscpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHardwareResponse, lshw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHardwareResponse, ifconfig_),
  };
  GetHardwareResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetHardwareResponse_descriptor_,
      GetHardwareResponse::default_instance_,
      GetHardwareResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHardwareResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHardwareResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetHardwareResponse));
  GetFileContentRequest_descriptor_ = file->message_type(3);
  static const int GetFileContentRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileContentRequest, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileContentRequest, max_size_),
  };
  GetFileContentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileContentRequest_descriptor_,
      GetFileContentRequest::default_instance_,
      GetFileContentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileContentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileContentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileContentRequest));
  GetFileContentResponse_descriptor_ = file->message_type(4);
  static const int GetFileContentResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileContentResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileContentResponse, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileContentResponse, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileContentResponse, modify_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileContentResponse, create_time_),
  };
  GetFileContentResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileContentResponse_descriptor_,
      GetFileContentResponse::default_instance_,
      GetFileContentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileContentResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileContentResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileContentResponse));
  GetFileChecksumRequest_descriptor_ = file->message_type(5);
  static const int GetFileChecksumRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileChecksumRequest, files_),
  };
  GetFileChecksumRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileChecksumRequest_descriptor_,
      GetFileChecksumRequest::default_instance_,
      GetFileChecksumRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileChecksumRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileChecksumRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileChecksumRequest));
  GetFileChecksumResponse_descriptor_ = file->message_type(6);
  static const int GetFileChecksumResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileChecksumResponse, md5sums_),
  };
  GetFileChecksumResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFileChecksumResponse_descriptor_,
      GetFileChecksumResponse::default_instance_,
      GetFileChecksumResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileChecksumResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFileChecksumResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFileChecksumResponse));
  ListProcessesRequest_descriptor_ = file->message_type(7);
  static const int ListProcessesRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesRequest, include_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesRequest, exclude_users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesRequest, get_load_),
  };
  ListProcessesRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListProcessesRequest_descriptor_,
      ListProcessesRequest::default_instance_,
      ListProcessesRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListProcessesRequest));
  ListProcessesResponse_descriptor_ = file->message_type(8);
  static const int ListProcessesResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse, processes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse, meminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse, proc_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse, loadavg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse, diskstats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse, net_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse, net_tcp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse, disk_usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse, cpuinfo_),
  };
  ListProcessesResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListProcessesResponse_descriptor_,
      ListProcessesResponse::default_instance_,
      ListProcessesResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListProcessesResponse));
  ListProcessesResponse_Process_descriptor_ = ListProcessesResponse_descriptor_->nested_type(0);
  static const int ListProcessesResponse_Process_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse_Process, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse_Process, proc_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse_Process, proc_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse_Process, cmdline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse_Process, exe_file_),
  };
  ListProcessesResponse_Process_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListProcessesResponse_Process_descriptor_,
      ListProcessesResponse_Process::default_instance_,
      ListProcessesResponse_Process_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse_Process, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListProcessesResponse_Process, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListProcessesResponse_Process));
  RunCommandRequest_descriptor_ = file->message_type(9);
  static const int RunCommandRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandRequest, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandRequest, cwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandRequest, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandRequest, envs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandRequest, envs_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandRequest, max_stdout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandRequest, max_stderr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandRequest, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandRequest, max_memory_mb_),
  };
  RunCommandRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunCommandRequest_descriptor_,
      RunCommandRequest::default_instance_,
      RunCommandRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunCommandRequest));
  RunCommandResponse_descriptor_ = file->message_type(10);
  static const int RunCommandResponse_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandResponse, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandResponse, std_output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandResponse, std_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandResponse, executable_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandResponse, start_time_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandResponse, finish_time_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandResponse, user_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandResponse, system_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandResponse, memory_maxrss_kb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandResponse, exit_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandResponse, signaled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandResponse, coredump_),
  };
  RunCommandResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunCommandResponse_descriptor_,
      RunCommandResponse::default_instance_,
      RunCommandResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunCommandResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunCommandResponse));
  RunScriptRequest_descriptor_ = file->message_type(11);
  static const int RunScriptRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunScriptRequest, script_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunScriptRequest, cwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunScriptRequest, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunScriptRequest, envs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunScriptRequest, envs_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunScriptRequest, max_stdout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunScriptRequest, max_stderr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunScriptRequest, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunScriptRequest, max_memory_mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunScriptRequest, interpreter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunScriptRequest, interpreter_args_),
  };
  RunScriptRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunScriptRequest_descriptor_,
      RunScriptRequest::default_instance_,
      RunScriptRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunScriptRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunScriptRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunScriptRequest));
  ApplicationStatus_descriptor_ = file->message_type(12);
  static const int ApplicationStatus_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, executable_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, cwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, slave_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, start_time_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, last_stop_time_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, proc_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, proc_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, last_exit_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, last_signaled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, last_coredump_),
  };
  ApplicationStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplicationStatus_descriptor_,
      ApplicationStatus::default_instance_,
      ApplicationStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplicationStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplicationStatus));
  AddApplicationRequest_descriptor_ = file->message_type(13);
  static const int AddApplicationRequest_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationRequest, binary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationRequest, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationRequest, envs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationRequest, envs_only_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationRequest, redirect_stdout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationRequest, redirect_stderr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationRequest, slave_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationRequest, max_memory_mb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationRequest, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationRequest, md5sum_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationRequest, expected_md5sums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationRequest, md5sum_now_),
  };
  AddApplicationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddApplicationRequest_descriptor_,
      AddApplicationRequest::default_instance_,
      AddApplicationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddApplicationRequest));
  AddApplicationResponse_descriptor_ = file->message_type(14);
  static const int AddApplicationResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationResponse, prev_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationResponse, md5sums_),
  };
  AddApplicationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddApplicationResponse_descriptor_,
      AddApplicationResponse::default_instance_,
      AddApplicationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddApplicationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddApplicationResponse));
  StartApplicationsRequest_descriptor_ = file->message_type(15);
  static const int StartApplicationsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartApplicationsRequest, names_),
  };
  StartApplicationsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartApplicationsRequest_descriptor_,
      StartApplicationsRequest::default_instance_,
      StartApplicationsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartApplicationsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartApplicationsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartApplicationsRequest));
  StartApplicationsResponse_descriptor_ = file->message_type(16);
  static const int StartApplicationsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartApplicationsResponse, status_),
  };
  StartApplicationsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartApplicationsResponse_descriptor_,
      StartApplicationsResponse::default_instance_,
      StartApplicationsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartApplicationsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartApplicationsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartApplicationsResponse));
  StopApplicationRequest_descriptor_ = file->message_type(17);
  static const int StopApplicationRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopApplicationRequest, names_),
  };
  StopApplicationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopApplicationRequest_descriptor_,
      StopApplicationRequest::default_instance_,
      StopApplicationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopApplicationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopApplicationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopApplicationRequest));
  StopApplicationResponse_descriptor_ = file->message_type(18);
  static const int StopApplicationResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopApplicationResponse, status_),
  };
  StopApplicationResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopApplicationResponse_descriptor_,
      StopApplicationResponse::default_instance_,
      StopApplicationResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopApplicationResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopApplicationResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopApplicationResponse));
  ListApplicationsRequest_descriptor_ = file->message_type(19);
  static const int ListApplicationsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListApplicationsRequest, names_),
  };
  ListApplicationsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListApplicationsRequest_descriptor_,
      ListApplicationsRequest::default_instance_,
      ListApplicationsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListApplicationsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListApplicationsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListApplicationsRequest));
  ListApplicationsResponse_descriptor_ = file->message_type(20);
  static const int ListApplicationsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListApplicationsResponse, status_),
  };
  ListApplicationsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListApplicationsResponse_descriptor_,
      ListApplicationsResponse::default_instance_,
      ListApplicationsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListApplicationsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListApplicationsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListApplicationsResponse));
  RemoveApplicationsRequest_descriptor_ = file->message_type(21);
  static const int RemoveApplicationsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveApplicationsRequest, name_),
  };
  RemoveApplicationsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveApplicationsRequest_descriptor_,
      RemoveApplicationsRequest::default_instance_,
      RemoveApplicationsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveApplicationsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveApplicationsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveApplicationsRequest));
  RemoveApplicationsResponse_descriptor_ = file->message_type(22);
  static const int RemoveApplicationsResponse_offsets_[1] = {
  };
  RemoveApplicationsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveApplicationsResponse_descriptor_,
      RemoveApplicationsResponse::default_instance_,
      RemoveApplicationsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveApplicationsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveApplicationsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveApplicationsResponse));
  ApplicationState_descriptor_ = file->enum_type(0);
  SlaveService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cetty_2fzurg_2fslave_2fslave_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiskUsage_descriptor_, &DiskUsage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetHardwareRequest_descriptor_, &GetHardwareRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetHardwareResponse_descriptor_, &GetHardwareResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileContentRequest_descriptor_, &GetFileContentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileContentResponse_descriptor_, &GetFileContentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileChecksumRequest_descriptor_, &GetFileChecksumRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFileChecksumResponse_descriptor_, &GetFileChecksumResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListProcessesRequest_descriptor_, &ListProcessesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListProcessesResponse_descriptor_, &ListProcessesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListProcessesResponse_Process_descriptor_, &ListProcessesResponse_Process::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunCommandRequest_descriptor_, &RunCommandRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunCommandResponse_descriptor_, &RunCommandResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunScriptRequest_descriptor_, &RunScriptRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplicationStatus_descriptor_, &ApplicationStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddApplicationRequest_descriptor_, &AddApplicationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddApplicationResponse_descriptor_, &AddApplicationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartApplicationsRequest_descriptor_, &StartApplicationsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartApplicationsResponse_descriptor_, &StartApplicationsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopApplicationRequest_descriptor_, &StopApplicationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopApplicationResponse_descriptor_, &StopApplicationResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListApplicationsRequest_descriptor_, &ListApplicationsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListApplicationsResponse_descriptor_, &ListApplicationsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveApplicationsRequest_descriptor_, &RemoveApplicationsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveApplicationsResponse_descriptor_, &RemoveApplicationsResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cetty_2fzurg_2fslave_2fslave_2eproto() {
  delete DiskUsage::default_instance_;
  delete DiskUsage_reflection_;
  delete GetHardwareRequest::default_instance_;
  delete GetHardwareRequest_reflection_;
  delete GetHardwareResponse::default_instance_;
  delete GetHardwareResponse_reflection_;
  delete GetFileContentRequest::default_instance_;
  delete GetFileContentRequest_reflection_;
  delete GetFileContentResponse::default_instance_;
  delete GetFileContentResponse_reflection_;
  delete GetFileChecksumRequest::default_instance_;
  delete GetFileChecksumRequest_reflection_;
  delete GetFileChecksumResponse::default_instance_;
  delete GetFileChecksumResponse_reflection_;
  delete ListProcessesRequest::default_instance_;
  delete ListProcessesRequest_reflection_;
  delete ListProcessesResponse::default_instance_;
  delete ListProcessesResponse_reflection_;
  delete ListProcessesResponse_Process::default_instance_;
  delete ListProcessesResponse_Process_reflection_;
  delete RunCommandRequest::default_instance_;
  delete RunCommandRequest_reflection_;
  delete RunCommandResponse::default_instance_;
  delete RunCommandResponse_reflection_;
  delete RunScriptRequest::default_instance_;
  delete RunScriptRequest_reflection_;
  delete ApplicationStatus::default_instance_;
  delete ApplicationStatus_reflection_;
  delete AddApplicationRequest::default_instance_;
  delete AddApplicationRequest_reflection_;
  delete AddApplicationResponse::default_instance_;
  delete AddApplicationResponse_reflection_;
  delete StartApplicationsRequest::default_instance_;
  delete StartApplicationsRequest_reflection_;
  delete StartApplicationsResponse::default_instance_;
  delete StartApplicationsResponse_reflection_;
  delete StopApplicationRequest::default_instance_;
  delete StopApplicationRequest_reflection_;
  delete StopApplicationResponse::default_instance_;
  delete StopApplicationResponse_reflection_;
  delete ListApplicationsRequest::default_instance_;
  delete ListApplicationsRequest_reflection_;
  delete ListApplicationsResponse::default_instance_;
  delete ListApplicationsResponse_reflection_;
  delete RemoveApplicationsRequest::default_instance_;
  delete RemoveApplicationsRequest_reflection_;
  delete RemoveApplicationsResponse::default_instance_;
  delete RemoveApplicationsResponse_reflection_;
}

void protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034cetty/zurg/slave/slave.proto\022\020cetty.zu"
    "rg.slave\"\351\001\n\tDiskUsage\022\016\n\006device\030\001 \002(\t\022\r"
    "\n\005mount\030\002 \002(\t\022\022\n\nblock_size\030\003 \002(\005\022\022\n\nblo"
    "cks_all\030\004 \002(\003\022\023\n\013blocks_free\030\005 \002(\003\022\024\n\014bl"
    "ocks_avail\030\006 \002(\003\022\022\n\ninodes_all\030\007 \002(\003\022\023\n\013"
    "inodes_free\030\010 \002(\003\022\024\n\014inodes_avail\030\t \002(\003\022"
    "\014\n\004fsid\030\n \002(\004\022\014\n\004flag\030\013 \002(\004\022\017\n\007namemax\030\014"
    " \002(\004\"%\n\022GetHardwareRequest\022\017\n\004lshw\030\001 \001(\005"
    ":\0010\"S\n\023GetHardwareResponse\022\r\n\005lspci\030\001 \001("
    "\t\022\r\n\005lscpu\030\002 \001(\t\022\014\n\004lshw\030\003 \001(\t\022\020\n\010ifconf"
    "ig\030\004 \001(\t\"E\n\025GetFileContentRequest\022\021\n\tfil"
    "e_name\030\001 \002(\t\022\031\n\010max_size\030\002 \001(\005:\0071048576\""
    "z\n\026GetFileContentResponse\022\022\n\nerror_code\030"
    "\001 \002(\005\022\017\n\007content\030\002 \001(\014\022\021\n\tfile_size\030\003 \001("
    "\003\022\023\n\013modify_time\030\004 \001(\003\022\023\n\013create_time\030\005 "
    "\001(\003\"\'\n\026GetFileChecksumRequest\022\r\n\005files\030\001"
    " \003(\t\"*\n\027GetFileChecksumResponse\022\017\n\007md5su"
    "ms\030\001 \003(\t\"]\n\024ListProcessesRequest\022\025\n\rincl"
    "ude_users\030\001 \003(\t\022\025\n\rexclude_users\030\002 \003(\t\022\027"
    "\n\010get_load\030\003 \001(\010:\005false\"\373\002\n\025ListProcesse"
    "sResponse\022B\n\tprocesses\030\001 \003(\0132/.cetty.zur"
    "g.slave.ListProcessesResponse.Process\022\017\n"
    "\007meminfo\030\002 \001(\t\022\021\n\tproc_stat\030\003 \001(\t\022\017\n\007loa"
    "davg\030\004 \001(\t\022\021\n\tdiskstats\030\005 \001(\t\022\017\n\007net_dev"
    "\030\006 \001(\t\022\017\n\007net_tcp\030\007 \001(\t\022/\n\ndisk_usage\030\010 "
    "\003(\0132\033.cetty.zurg.slave.DiskUsage\022\017\n\007vers"
    "ion\030\t \001(\t\022\017\n\007cpuinfo\030\n \001(\t\032a\n\007Process\022\013\n"
    "\003pid\030\001 \002(\005\022\021\n\tproc_stat\030\002 \002(\t\022\023\n\013proc_st"
    "atus\030\003 \002(\t\022\017\n\007cmdline\030\004 \001(\t\022\020\n\010exe_file\030"
    "\005 \001(\t\"\334\001\n\021RunCommandRequest\022\017\n\007command\030\001"
    " \002(\t\022\021\n\003cwd\030\002 \001(\t:\004/tmp\022\014\n\004args\030\003 \003(\t\022\014\n"
    "\004envs\030\004 \003(\t\022\030\n\tenvs_only\030\005 \001(\010:\005false\022\033\n"
    "\nmax_stdout\030\006 \001(\005:\0071048576\022\033\n\nmax_stderr"
    "\030\007 \001(\005:\0071048576\022\025\n\007timeout\030\010 \001(\005:\0043000\022\034"
    "\n\rmax_memory_mb\030\t \001(\005:\00532768\"\274\002\n\022RunComm"
    "andResponse\022\022\n\nerror_code\030\001 \002(\005\022\013\n\003pid\030\002"
    " \001(\005\022\016\n\006status\030\003 \001(\005\022\022\n\nstd_output\030\004 \001(\014"
    "\022\021\n\tstd_error\030\005 \001(\014\022\027\n\017executable_file\030\006"
    " \001(\t\022\025\n\rstart_time_us\030\020 \001(\003\022\026\n\016finish_ti"
    "me_us\030\021 \001(\003\022\021\n\tuser_time\030\022 \001(\002\022\023\n\013system"
    "_time\030\023 \001(\002\022\030\n\020memory_maxrss_kb\030\024 \001(\003\022\026\n"
    "\013exit_status\030\036 \001(\005:\0010\022\023\n\010signaled\030\037 \001(\005:"
    "\0010\022\027\n\010coredump\030  \001(\010:\005false\"\207\002\n\020RunScrip"
    "tRequest\022\016\n\006script\030\001 \002(\014\022\021\n\003cwd\030\002 \001(\t:\004/"
    "tmp\022\014\n\004args\030\003 \003(\t\022\014\n\004envs\030\004 \003(\t\022\030\n\tenvs_"
    "only\030\005 \001(\010:\005false\022\033\n\nmax_stdout\030\006 \001(\005:\0071"
    "048576\022\033\n\nmax_stderr\030\007 \001(\005:\0071048576\022\023\n\007t"
    "imeout\030\010 \001(\005:\00260\022\034\n\rmax_memory_mb\030\t \001(\005:"
    "\00532768\022\023\n\013interpreter\030\n \001(\t\022\030\n\020interpret"
    "er_args\030\013 \003(\t\"\330\002\n\021ApplicationStatus\022;\n\005s"
    "tate\030\001 \002(\0162\".cetty.zurg.slave.Applicatio"
    "nState:\010kUnknown\022\014\n\004name\030\002 \002(\t\022\013\n\003pid\030\003 "
    "\001(\005\022\027\n\017executable_file\030\004 \001(\t\022\013\n\003cwd\030\005 \001("
    "\t\022\017\n\007message\030\006 \001(\t\022\022\n\nslave_name\030\010 \001(\t\022\025"
    "\n\rstart_time_us\030\n \001(\003\022\031\n\021last_stop_time_"
    "us\030\013 \001(\003\022\021\n\tproc_stat\030\014 \001(\t\022\023\n\013proc_stat"
    "us\030\r \001(\t\022\030\n\020last_exit_status\030\036 \001(\005\022\025\n\rla"
    "st_signaled\030\037 \001(\005\022\025\n\rlast_coredump\030  \001(\010"
    "\"\260\002\n\025AddApplicationRequest\022\014\n\004name\030\001 \002(\t"
    "\022\016\n\006binary\030\002 \002(\t\022\014\n\004args\030\003 \003(\t\022\014\n\004envs\030\004"
    " \003(\t\022\030\n\tenvs_only\030\005 \001(\010:\005false\022\035\n\017redire"
    "ct_stdout\030\006 \001(\010:\004true\022\035\n\017redirect_stderr"
    "\030\007 \001(\010:\004true\022\022\n\nslave_name\030\010 \002(\t\022\034\n\rmax_"
    "memory_mb\030\t \001(\005:\00532768\022\017\n\007comment\030\n \001(\t\022"
    "\024\n\014md5sum_files\030\024 \003(\t\022\030\n\020expected_md5sum"
    "s\030\025 \003(\t\022\022\n\nmd5sum_now\030\026 \001(\010\"\235\001\n\026AddAppli"
    "cationResponse\0223\n\006status\030\001 \001(\0132#.cetty.z"
    "urg.slave.ApplicationStatus\022=\n\014prev_requ"
    "est\030\002 \001(\0132\'.cetty.zurg.slave.AddApplicat"
    "ionRequest\022\017\n\007md5sums\030\003 \003(\t\")\n\030StartAppl"
    "icationsRequest\022\r\n\005names\030\001 \003(\t\"P\n\031StartA"
    "pplicationsResponse\0223\n\006status\030\001 \003(\0132#.ce"
    "tty.zurg.slave.ApplicationStatus\"\'\n\026Stop"
    "ApplicationRequest\022\r\n\005names\030\001 \002(\t\"N\n\027Sto"
    "pApplicationResponse\0223\n\006status\030\001 \002(\0132#.c"
    "etty.zurg.slave.ApplicationStatus\"(\n\027Lis"
    "tApplicationsRequest\022\r\n\005names\030\001 \003(\t\"O\n\030L"
    "istApplicationsResponse\0223\n\006status\030\001 \003(\0132"
    "#.cetty.zurg.slave.ApplicationStatus\")\n\031"
    "RemoveApplicationsRequest\022\014\n\004name\030\001 \003(\t\""
    "\034\n\032RemoveApplicationsResponse*T\n\020Applica"
    "tionState\022\014\n\010kUnknown\020\000\022\013\n\007kNewApp\020\001\022\014\n\010"
    "kRunning\020\002\022\013\n\007kExited\020\003\022\n\n\006kError\020\0042\340\010\n\014"
    "SlaveService\022Z\n\013getHardware\022$.cetty.zurg"
    ".slave.GetHardwareRequest\032%.cetty.zurg.s"
    "lave.GetHardwareResponse\022c\n\016getFileConte"
    "nt\022\'.cetty.zurg.slave.GetFileContentRequ"
    "est\032(.cetty.zurg.slave.GetFileContentRes"
    "ponse\022f\n\017getFileChecksum\022(.cetty.zurg.sl"
    "ave.GetFileChecksumRequest\032).cetty.zurg."
    "slave.GetFileChecksumResponse\022`\n\rlistPro"
    "cesses\022&.cetty.zurg.slave.ListProcessesR"
    "equest\032\'.cetty.zurg.slave.ListProcessesR"
    "esponse\022W\n\nrunCommand\022#.cetty.zurg.slave"
    ".RunCommandRequest\032$.cetty.zurg.slave.Ru"
    "nCommandResponse\022U\n\trunScript\022\".cetty.zu"
    "rg.slave.RunScriptRequest\032$.cetty.zurg.s"
    "lave.RunCommandResponse\022c\n\016addApplicatio"
    "n\022\'.cetty.zurg.slave.AddApplicationReque"
    "st\032(.cetty.zurg.slave.AddApplicationResp"
    "onse\022l\n\021startApplications\022*.cetty.zurg.s"
    "lave.StartApplicationsRequest\032+.cetty.zu"
    "rg.slave.StartApplicationsResponse\022f\n\017st"
    "opApplication\022(.cetty.zurg.slave.StopApp"
    "licationRequest\032).cetty.zurg.slave.StopA"
    "pplicationResponse\022i\n\020listApplications\022)"
    ".cetty.zurg.slave.ListApplicationsReques"
    "t\032*.cetty.zurg.slave.ListApplicationsRes"
    "ponse\022o\n\022removeApplications\022+.cetty.zurg"
    ".slave.RemoveApplicationsRequest\032,.cetty"
    ".zurg.slave.RemoveApplicationsResponseB\'"
    "\n\020cetty.zurg.slaveB\nSlaveProto\200\001\001\210\001\001\220\001\001", 4479);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cetty/zurg/slave/slave.proto", &protobuf_RegisterTypes);
  DiskUsage::default_instance_ = new DiskUsage();
  GetHardwareRequest::default_instance_ = new GetHardwareRequest();
  GetHardwareResponse::default_instance_ = new GetHardwareResponse();
  GetFileContentRequest::default_instance_ = new GetFileContentRequest();
  GetFileContentResponse::default_instance_ = new GetFileContentResponse();
  GetFileChecksumRequest::default_instance_ = new GetFileChecksumRequest();
  GetFileChecksumResponse::default_instance_ = new GetFileChecksumResponse();
  ListProcessesRequest::default_instance_ = new ListProcessesRequest();
  ListProcessesResponse::default_instance_ = new ListProcessesResponse();
  ListProcessesResponse_Process::default_instance_ = new ListProcessesResponse_Process();
  RunCommandRequest::default_instance_ = new RunCommandRequest();
  RunCommandResponse::default_instance_ = new RunCommandResponse();
  RunScriptRequest::default_instance_ = new RunScriptRequest();
  ApplicationStatus::default_instance_ = new ApplicationStatus();
  AddApplicationRequest::default_instance_ = new AddApplicationRequest();
  AddApplicationResponse::default_instance_ = new AddApplicationResponse();
  StartApplicationsRequest::default_instance_ = new StartApplicationsRequest();
  StartApplicationsResponse::default_instance_ = new StartApplicationsResponse();
  StopApplicationRequest::default_instance_ = new StopApplicationRequest();
  StopApplicationResponse::default_instance_ = new StopApplicationResponse();
  ListApplicationsRequest::default_instance_ = new ListApplicationsRequest();
  ListApplicationsResponse::default_instance_ = new ListApplicationsResponse();
  RemoveApplicationsRequest::default_instance_ = new RemoveApplicationsRequest();
  RemoveApplicationsResponse::default_instance_ = new RemoveApplicationsResponse();
  DiskUsage::default_instance_->InitAsDefaultInstance();
  GetHardwareRequest::default_instance_->InitAsDefaultInstance();
  GetHardwareResponse::default_instance_->InitAsDefaultInstance();
  GetFileContentRequest::default_instance_->InitAsDefaultInstance();
  GetFileContentResponse::default_instance_->InitAsDefaultInstance();
  GetFileChecksumRequest::default_instance_->InitAsDefaultInstance();
  GetFileChecksumResponse::default_instance_->InitAsDefaultInstance();
  ListProcessesRequest::default_instance_->InitAsDefaultInstance();
  ListProcessesResponse::default_instance_->InitAsDefaultInstance();
  ListProcessesResponse_Process::default_instance_->InitAsDefaultInstance();
  RunCommandRequest::default_instance_->InitAsDefaultInstance();
  RunCommandResponse::default_instance_->InitAsDefaultInstance();
  RunScriptRequest::default_instance_->InitAsDefaultInstance();
  ApplicationStatus::default_instance_->InitAsDefaultInstance();
  AddApplicationRequest::default_instance_->InitAsDefaultInstance();
  AddApplicationResponse::default_instance_->InitAsDefaultInstance();
  StartApplicationsRequest::default_instance_->InitAsDefaultInstance();
  StartApplicationsResponse::default_instance_->InitAsDefaultInstance();
  StopApplicationRequest::default_instance_->InitAsDefaultInstance();
  StopApplicationResponse::default_instance_->InitAsDefaultInstance();
  ListApplicationsRequest::default_instance_->InitAsDefaultInstance();
  ListApplicationsResponse::default_instance_->InitAsDefaultInstance();
  RemoveApplicationsRequest::default_instance_->InitAsDefaultInstance();
  RemoveApplicationsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cetty_2fzurg_2fslave_2fslave_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cetty_2fzurg_2fslave_2fslave_2eproto {
  StaticDescriptorInitializer_cetty_2fzurg_2fslave_2fslave_2eproto() {
    protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();
  }
} static_descriptor_initializer_cetty_2fzurg_2fslave_2fslave_2eproto_;

const ::google::protobuf::EnumDescriptor* ApplicationState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationState_descriptor_;
}
bool ApplicationState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int DiskUsage::kDeviceFieldNumber;
const int DiskUsage::kMountFieldNumber;
const int DiskUsage::kBlockSizeFieldNumber;
const int DiskUsage::kBlocksAllFieldNumber;
const int DiskUsage::kBlocksFreeFieldNumber;
const int DiskUsage::kBlocksAvailFieldNumber;
const int DiskUsage::kInodesAllFieldNumber;
const int DiskUsage::kInodesFreeFieldNumber;
const int DiskUsage::kInodesAvailFieldNumber;
const int DiskUsage::kFsidFieldNumber;
const int DiskUsage::kFlagFieldNumber;
const int DiskUsage::kNamemaxFieldNumber;
#endif  // !_MSC_VER

DiskUsage::DiskUsage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DiskUsage::InitAsDefaultInstance() {
}

DiskUsage::DiskUsage(const DiskUsage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DiskUsage::SharedCtor() {
  _cached_size_ = 0;
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_size_ = 0;
  blocks_all_ = GOOGLE_LONGLONG(0);
  blocks_free_ = GOOGLE_LONGLONG(0);
  blocks_avail_ = GOOGLE_LONGLONG(0);
  inodes_all_ = GOOGLE_LONGLONG(0);
  inodes_free_ = GOOGLE_LONGLONG(0);
  inodes_avail_ = GOOGLE_LONGLONG(0);
  fsid_ = GOOGLE_ULONGLONG(0);
  flag_ = GOOGLE_ULONGLONG(0);
  namemax_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiskUsage::~DiskUsage() {
  SharedDtor();
}

void DiskUsage::SharedDtor() {
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (mount_ != &::google::protobuf::internal::kEmptyString) {
    delete mount_;
  }
  if (this != default_instance_) {
  }
}

void DiskUsage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskUsage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiskUsage_descriptor_;
}

const DiskUsage& DiskUsage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

DiskUsage* DiskUsage::default_instance_ = NULL;

DiskUsage* DiskUsage::New() const {
  return new DiskUsage;
}

void DiskUsage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
    if (has_mount()) {
      if (mount_ != &::google::protobuf::internal::kEmptyString) {
        mount_->clear();
      }
    }
    block_size_ = 0;
    blocks_all_ = GOOGLE_LONGLONG(0);
    blocks_free_ = GOOGLE_LONGLONG(0);
    blocks_avail_ = GOOGLE_LONGLONG(0);
    inodes_all_ = GOOGLE_LONGLONG(0);
    inodes_free_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    inodes_avail_ = GOOGLE_LONGLONG(0);
    fsid_ = GOOGLE_ULONGLONG(0);
    flag_ = GOOGLE_ULONGLONG(0);
    namemax_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiskUsage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string device = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mount;
        break;
      }
      
      // required string mount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mount().data(), this->mount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_block_size;
        break;
      }
      
      // required int32 block_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_size_)));
          set_has_block_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_blocks_all;
        break;
      }
      
      // required int64 blocks_all = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blocks_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blocks_all_)));
          set_has_blocks_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_blocks_free;
        break;
      }
      
      // required int64 blocks_free = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blocks_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blocks_free_)));
          set_has_blocks_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_blocks_avail;
        break;
      }
      
      // required int64 blocks_avail = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blocks_avail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &blocks_avail_)));
          set_has_blocks_avail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inodes_all;
        break;
      }
      
      // required int64 inodes_all = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inodes_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inodes_all_)));
          set_has_inodes_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_inodes_free;
        break;
      }
      
      // required int64 inodes_free = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inodes_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inodes_free_)));
          set_has_inodes_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_inodes_avail;
        break;
      }
      
      // required int64 inodes_avail = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inodes_avail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inodes_avail_)));
          set_has_inodes_avail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fsid;
        break;
      }
      
      // required uint64 fsid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fsid_)));
          set_has_fsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_flag;
        break;
      }
      
      // required uint64 flag = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_namemax;
        break;
      }
      
      // required uint64 namemax = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_namemax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &namemax_)));
          set_has_namemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DiskUsage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string device = 1;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->device(), output);
  }
  
  // required string mount = 2;
  if (has_mount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mount().data(), this->mount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mount(), output);
  }
  
  // required int32 block_size = 3;
  if (has_block_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->block_size(), output);
  }
  
  // required int64 blocks_all = 4;
  if (has_blocks_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->blocks_all(), output);
  }
  
  // required int64 blocks_free = 5;
  if (has_blocks_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->blocks_free(), output);
  }
  
  // required int64 blocks_avail = 6;
  if (has_blocks_avail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->blocks_avail(), output);
  }
  
  // required int64 inodes_all = 7;
  if (has_inodes_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->inodes_all(), output);
  }
  
  // required int64 inodes_free = 8;
  if (has_inodes_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->inodes_free(), output);
  }
  
  // required int64 inodes_avail = 9;
  if (has_inodes_avail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->inodes_avail(), output);
  }
  
  // required uint64 fsid = 10;
  if (has_fsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->fsid(), output);
  }
  
  // required uint64 flag = 11;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->flag(), output);
  }
  
  // required uint64 namemax = 12;
  if (has_namemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->namemax(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DiskUsage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string device = 1;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device(), target);
  }
  
  // required string mount = 2;
  if (has_mount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mount().data(), this->mount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mount(), target);
  }
  
  // required int32 block_size = 3;
  if (has_block_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->block_size(), target);
  }
  
  // required int64 blocks_all = 4;
  if (has_blocks_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->blocks_all(), target);
  }
  
  // required int64 blocks_free = 5;
  if (has_blocks_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->blocks_free(), target);
  }
  
  // required int64 blocks_avail = 6;
  if (has_blocks_avail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->blocks_avail(), target);
  }
  
  // required int64 inodes_all = 7;
  if (has_inodes_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->inodes_all(), target);
  }
  
  // required int64 inodes_free = 8;
  if (has_inodes_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->inodes_free(), target);
  }
  
  // required int64 inodes_avail = 9;
  if (has_inodes_avail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->inodes_avail(), target);
  }
  
  // required uint64 fsid = 10;
  if (has_fsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->fsid(), target);
  }
  
  // required uint64 flag = 11;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->flag(), target);
  }
  
  // required uint64 namemax = 12;
  if (has_namemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->namemax(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DiskUsage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string device = 1;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }
    
    // required string mount = 2;
    if (has_mount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mount());
    }
    
    // required int32 block_size = 3;
    if (has_block_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block_size());
    }
    
    // required int64 blocks_all = 4;
    if (has_blocks_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->blocks_all());
    }
    
    // required int64 blocks_free = 5;
    if (has_blocks_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->blocks_free());
    }
    
    // required int64 blocks_avail = 6;
    if (has_blocks_avail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->blocks_avail());
    }
    
    // required int64 inodes_all = 7;
    if (has_inodes_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inodes_all());
    }
    
    // required int64 inodes_free = 8;
    if (has_inodes_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inodes_free());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 inodes_avail = 9;
    if (has_inodes_avail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inodes_avail());
    }
    
    // required uint64 fsid = 10;
    if (has_fsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fsid());
    }
    
    // required uint64 flag = 11;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flag());
    }
    
    // required uint64 namemax = 12;
    if (has_namemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->namemax());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskUsage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiskUsage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiskUsage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiskUsage::MergeFrom(const DiskUsage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_mount()) {
      set_mount(from.mount());
    }
    if (from.has_block_size()) {
      set_block_size(from.block_size());
    }
    if (from.has_blocks_all()) {
      set_blocks_all(from.blocks_all());
    }
    if (from.has_blocks_free()) {
      set_blocks_free(from.blocks_free());
    }
    if (from.has_blocks_avail()) {
      set_blocks_avail(from.blocks_avail());
    }
    if (from.has_inodes_all()) {
      set_inodes_all(from.inodes_all());
    }
    if (from.has_inodes_free()) {
      set_inodes_free(from.inodes_free());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_inodes_avail()) {
      set_inodes_avail(from.inodes_avail());
    }
    if (from.has_fsid()) {
      set_fsid(from.fsid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_namemax()) {
      set_namemax(from.namemax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiskUsage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskUsage::CopyFrom(const DiskUsage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskUsage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  
  return true;
}

void DiskUsage::Swap(DiskUsage* other) {
  if (other != this) {
    std::swap(device_, other->device_);
    std::swap(mount_, other->mount_);
    std::swap(block_size_, other->block_size_);
    std::swap(blocks_all_, other->blocks_all_);
    std::swap(blocks_free_, other->blocks_free_);
    std::swap(blocks_avail_, other->blocks_avail_);
    std::swap(inodes_all_, other->inodes_all_);
    std::swap(inodes_free_, other->inodes_free_);
    std::swap(inodes_avail_, other->inodes_avail_);
    std::swap(fsid_, other->fsid_);
    std::swap(flag_, other->flag_);
    std::swap(namemax_, other->namemax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiskUsage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiskUsage_descriptor_;
  metadata.reflection = DiskUsage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetHardwareRequest::kLshwFieldNumber;
#endif  // !_MSC_VER

GetHardwareRequest::GetHardwareRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetHardwareRequest::InitAsDefaultInstance() {
}

GetHardwareRequest::GetHardwareRequest(const GetHardwareRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetHardwareRequest::SharedCtor() {
  _cached_size_ = 0;
  lshw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetHardwareRequest::~GetHardwareRequest() {
  SharedDtor();
}

void GetHardwareRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetHardwareRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetHardwareRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetHardwareRequest_descriptor_;
}

const GetHardwareRequest& GetHardwareRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

GetHardwareRequest* GetHardwareRequest::default_instance_ = NULL;

GetHardwareRequest* GetHardwareRequest::New() const {
  return new GetHardwareRequest;
}

void GetHardwareRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lshw_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetHardwareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lshw = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lshw_)));
          set_has_lshw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetHardwareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lshw = 1 [default = 0];
  if (has_lshw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lshw(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetHardwareRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lshw = 1 [default = 0];
  if (has_lshw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lshw(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetHardwareRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lshw = 1 [default = 0];
    if (has_lshw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lshw());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHardwareRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetHardwareRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetHardwareRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetHardwareRequest::MergeFrom(const GetHardwareRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lshw()) {
      set_lshw(from.lshw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetHardwareRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHardwareRequest::CopyFrom(const GetHardwareRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHardwareRequest::IsInitialized() const {
  
  return true;
}

void GetHardwareRequest::Swap(GetHardwareRequest* other) {
  if (other != this) {
    std::swap(lshw_, other->lshw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetHardwareRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetHardwareRequest_descriptor_;
  metadata.reflection = GetHardwareRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetHardwareResponse::kLspciFieldNumber;
const int GetHardwareResponse::kLscpuFieldNumber;
const int GetHardwareResponse::kLshwFieldNumber;
const int GetHardwareResponse::kIfconfigFieldNumber;
#endif  // !_MSC_VER

GetHardwareResponse::GetHardwareResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetHardwareResponse::InitAsDefaultInstance() {
}

GetHardwareResponse::GetHardwareResponse(const GetHardwareResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetHardwareResponse::SharedCtor() {
  _cached_size_ = 0;
  lspci_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lscpu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lshw_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ifconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetHardwareResponse::~GetHardwareResponse() {
  SharedDtor();
}

void GetHardwareResponse::SharedDtor() {
  if (lspci_ != &::google::protobuf::internal::kEmptyString) {
    delete lspci_;
  }
  if (lscpu_ != &::google::protobuf::internal::kEmptyString) {
    delete lscpu_;
  }
  if (lshw_ != &::google::protobuf::internal::kEmptyString) {
    delete lshw_;
  }
  if (ifconfig_ != &::google::protobuf::internal::kEmptyString) {
    delete ifconfig_;
  }
  if (this != default_instance_) {
  }
}

void GetHardwareResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetHardwareResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetHardwareResponse_descriptor_;
}

const GetHardwareResponse& GetHardwareResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

GetHardwareResponse* GetHardwareResponse::default_instance_ = NULL;

GetHardwareResponse* GetHardwareResponse::New() const {
  return new GetHardwareResponse;
}

void GetHardwareResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lspci()) {
      if (lspci_ != &::google::protobuf::internal::kEmptyString) {
        lspci_->clear();
      }
    }
    if (has_lscpu()) {
      if (lscpu_ != &::google::protobuf::internal::kEmptyString) {
        lscpu_->clear();
      }
    }
    if (has_lshw()) {
      if (lshw_ != &::google::protobuf::internal::kEmptyString) {
        lshw_->clear();
      }
    }
    if (has_ifconfig()) {
      if (ifconfig_ != &::google::protobuf::internal::kEmptyString) {
        ifconfig_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetHardwareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string lspci = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lspci()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lspci().data(), this->lspci().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lscpu;
        break;
      }
      
      // optional string lscpu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lscpu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lscpu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lscpu().data(), this->lscpu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lshw;
        break;
      }
      
      // optional string lshw = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lshw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lshw()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lshw().data(), this->lshw().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ifconfig;
        break;
      }
      
      // optional string ifconfig = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ifconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ifconfig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ifconfig().data(), this->ifconfig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetHardwareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string lspci = 1;
  if (has_lspci()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lspci().data(), this->lspci().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lspci(), output);
  }
  
  // optional string lscpu = 2;
  if (has_lscpu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lscpu().data(), this->lscpu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lscpu(), output);
  }
  
  // optional string lshw = 3;
  if (has_lshw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lshw().data(), this->lshw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lshw(), output);
  }
  
  // optional string ifconfig = 4;
  if (has_ifconfig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ifconfig().data(), this->ifconfig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ifconfig(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetHardwareResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string lspci = 1;
  if (has_lspci()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lspci().data(), this->lspci().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->lspci(), target);
  }
  
  // optional string lscpu = 2;
  if (has_lscpu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lscpu().data(), this->lscpu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lscpu(), target);
  }
  
  // optional string lshw = 3;
  if (has_lshw()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lshw().data(), this->lshw().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lshw(), target);
  }
  
  // optional string ifconfig = 4;
  if (has_ifconfig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ifconfig().data(), this->ifconfig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ifconfig(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetHardwareResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string lspci = 1;
    if (has_lspci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lspci());
    }
    
    // optional string lscpu = 2;
    if (has_lscpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lscpu());
    }
    
    // optional string lshw = 3;
    if (has_lshw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lshw());
    }
    
    // optional string ifconfig = 4;
    if (has_ifconfig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ifconfig());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHardwareResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetHardwareResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetHardwareResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetHardwareResponse::MergeFrom(const GetHardwareResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lspci()) {
      set_lspci(from.lspci());
    }
    if (from.has_lscpu()) {
      set_lscpu(from.lscpu());
    }
    if (from.has_lshw()) {
      set_lshw(from.lshw());
    }
    if (from.has_ifconfig()) {
      set_ifconfig(from.ifconfig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetHardwareResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHardwareResponse::CopyFrom(const GetHardwareResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHardwareResponse::IsInitialized() const {
  
  return true;
}

void GetHardwareResponse::Swap(GetHardwareResponse* other) {
  if (other != this) {
    std::swap(lspci_, other->lspci_);
    std::swap(lscpu_, other->lscpu_);
    std::swap(lshw_, other->lshw_);
    std::swap(ifconfig_, other->ifconfig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetHardwareResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetHardwareResponse_descriptor_;
  metadata.reflection = GetHardwareResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFileContentRequest::kFileNameFieldNumber;
const int GetFileContentRequest::kMaxSizeFieldNumber;
#endif  // !_MSC_VER

GetFileContentRequest::GetFileContentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileContentRequest::InitAsDefaultInstance() {
}

GetFileContentRequest::GetFileContentRequest(const GetFileContentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileContentRequest::SharedCtor() {
  _cached_size_ = 0;
  file_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_size_ = 1048576;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileContentRequest::~GetFileContentRequest() {
  SharedDtor();
}

void GetFileContentRequest::SharedDtor() {
  if (file_name_ != &::google::protobuf::internal::kEmptyString) {
    delete file_name_;
  }
  if (this != default_instance_) {
  }
}

void GetFileContentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileContentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileContentRequest_descriptor_;
}

const GetFileContentRequest& GetFileContentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

GetFileContentRequest* GetFileContentRequest::default_instance_ = NULL;

GetFileContentRequest* GetFileContentRequest::New() const {
  return new GetFileContentRequest;
}

void GetFileContentRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_file_name()) {
      if (file_name_ != &::google::protobuf::internal::kEmptyString) {
        file_name_->clear();
      }
    }
    max_size_ = 1048576;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileContentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_name().data(), this->file_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_size;
        break;
      }
      
      // optional int32 max_size = 2 [default = 1048576];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_size_)));
          set_has_max_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileContentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->file_name(), output);
  }
  
  // optional int32 max_size = 2 [default = 1048576];
  if (has_max_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileContentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string file_name = 1;
  if (has_file_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_name().data(), this->file_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }
  
  // optional int32 max_size = 2 [default = 1048576];
  if (has_max_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileContentRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string file_name = 1;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }
    
    // optional int32 max_size = 2 [default = 1048576];
    if (has_max_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileContentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileContentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileContentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileContentRequest::MergeFrom(const GetFileContentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_file_name()) {
      set_file_name(from.file_name());
    }
    if (from.has_max_size()) {
      set_max_size(from.max_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileContentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileContentRequest::CopyFrom(const GetFileContentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileContentRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetFileContentRequest::Swap(GetFileContentRequest* other) {
  if (other != this) {
    std::swap(file_name_, other->file_name_);
    std::swap(max_size_, other->max_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileContentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileContentRequest_descriptor_;
  metadata.reflection = GetFileContentRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFileContentResponse::kErrorCodeFieldNumber;
const int GetFileContentResponse::kContentFieldNumber;
const int GetFileContentResponse::kFileSizeFieldNumber;
const int GetFileContentResponse::kModifyTimeFieldNumber;
const int GetFileContentResponse::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

GetFileContentResponse::GetFileContentResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileContentResponse::InitAsDefaultInstance() {
}

GetFileContentResponse::GetFileContentResponse(const GetFileContentResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileContentResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  file_size_ = GOOGLE_LONGLONG(0);
  modify_time_ = GOOGLE_LONGLONG(0);
  create_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileContentResponse::~GetFileContentResponse() {
  SharedDtor();
}

void GetFileContentResponse::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void GetFileContentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileContentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileContentResponse_descriptor_;
}

const GetFileContentResponse& GetFileContentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

GetFileContentResponse* GetFileContentResponse::default_instance_ = NULL;

GetFileContentResponse* GetFileContentResponse::New() const {
  return new GetFileContentResponse;
}

void GetFileContentResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    file_size_ = GOOGLE_LONGLONG(0);
    modify_time_ = GOOGLE_LONGLONG(0);
    create_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileContentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // optional bytes content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_file_size;
        break;
      }
      
      // optional int64 file_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_modify_time;
        break;
      }
      
      // optional int64 modify_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modify_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &modify_time_)));
          set_has_modify_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_create_time;
        break;
      }
      
      // optional int64 create_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileContentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional bytes content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->content(), output);
  }
  
  // optional int64 file_size = 3;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->file_size(), output);
  }
  
  // optional int64 modify_time = 4;
  if (has_modify_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->modify_time(), output);
  }
  
  // optional int64 create_time = 5;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->create_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileContentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional bytes content = 2;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }
  
  // optional int64 file_size = 3;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->file_size(), target);
  }
  
  // optional int64 modify_time = 4;
  if (has_modify_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->modify_time(), target);
  }
  
  // optional int64 create_time = 5;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->create_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileContentResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }
    
    // optional int64 file_size = 3;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->file_size());
    }
    
    // optional int64 modify_time = 4;
    if (has_modify_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->modify_time());
    }
    
    // optional int64 create_time = 5;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileContentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileContentResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileContentResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileContentResponse::MergeFrom(const GetFileContentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_modify_time()) {
      set_modify_time(from.modify_time());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileContentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileContentResponse::CopyFrom(const GetFileContentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileContentResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetFileContentResponse::Swap(GetFileContentResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(content_, other->content_);
    std::swap(file_size_, other->file_size_);
    std::swap(modify_time_, other->modify_time_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileContentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileContentResponse_descriptor_;
  metadata.reflection = GetFileContentResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFileChecksumRequest::kFilesFieldNumber;
#endif  // !_MSC_VER

GetFileChecksumRequest::GetFileChecksumRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileChecksumRequest::InitAsDefaultInstance() {
}

GetFileChecksumRequest::GetFileChecksumRequest(const GetFileChecksumRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileChecksumRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileChecksumRequest::~GetFileChecksumRequest() {
  SharedDtor();
}

void GetFileChecksumRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFileChecksumRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileChecksumRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileChecksumRequest_descriptor_;
}

const GetFileChecksumRequest& GetFileChecksumRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

GetFileChecksumRequest* GetFileChecksumRequest::default_instance_ = NULL;

GetFileChecksumRequest* GetFileChecksumRequest::New() const {
  return new GetFileChecksumRequest;
}

void GetFileChecksumRequest::Clear() {
  files_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileChecksumRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string files = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_files()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->files(0).data(), this->files(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_files;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileChecksumRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string files = 1;
  for (int i = 0; i < this->files_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->files(i).data(), this->files(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->files(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileChecksumRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string files = 1;
  for (int i = 0; i < this->files_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->files(i).data(), this->files(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->files(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileChecksumRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated string files = 1;
  total_size += 1 * this->files_size();
  for (int i = 0; i < this->files_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->files(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileChecksumRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileChecksumRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileChecksumRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileChecksumRequest::MergeFrom(const GetFileChecksumRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  files_.MergeFrom(from.files_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileChecksumRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileChecksumRequest::CopyFrom(const GetFileChecksumRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileChecksumRequest::IsInitialized() const {
  
  return true;
}

void GetFileChecksumRequest::Swap(GetFileChecksumRequest* other) {
  if (other != this) {
    files_.Swap(&other->files_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileChecksumRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileChecksumRequest_descriptor_;
  metadata.reflection = GetFileChecksumRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFileChecksumResponse::kMd5SumsFieldNumber;
#endif  // !_MSC_VER

GetFileChecksumResponse::GetFileChecksumResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetFileChecksumResponse::InitAsDefaultInstance() {
}

GetFileChecksumResponse::GetFileChecksumResponse(const GetFileChecksumResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetFileChecksumResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFileChecksumResponse::~GetFileChecksumResponse() {
  SharedDtor();
}

void GetFileChecksumResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFileChecksumResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFileChecksumResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFileChecksumResponse_descriptor_;
}

const GetFileChecksumResponse& GetFileChecksumResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

GetFileChecksumResponse* GetFileChecksumResponse::default_instance_ = NULL;

GetFileChecksumResponse* GetFileChecksumResponse::New() const {
  return new GetFileChecksumResponse;
}

void GetFileChecksumResponse::Clear() {
  md5sums_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFileChecksumResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string md5sums = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5sums:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_md5sums()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5sums(0).data(), this->md5sums(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_md5sums;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetFileChecksumResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string md5sums = 1;
  for (int i = 0; i < this->md5sums_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->md5sums(i).data(), this->md5sums(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->md5sums(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetFileChecksumResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string md5sums = 1;
  for (int i = 0; i < this->md5sums_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5sums(i).data(), this->md5sums(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->md5sums(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetFileChecksumResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated string md5sums = 1;
  total_size += 1 * this->md5sums_size();
  for (int i = 0; i < this->md5sums_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->md5sums(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFileChecksumResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFileChecksumResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFileChecksumResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFileChecksumResponse::MergeFrom(const GetFileChecksumResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  md5sums_.MergeFrom(from.md5sums_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFileChecksumResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFileChecksumResponse::CopyFrom(const GetFileChecksumResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFileChecksumResponse::IsInitialized() const {
  
  return true;
}

void GetFileChecksumResponse::Swap(GetFileChecksumResponse* other) {
  if (other != this) {
    md5sums_.Swap(&other->md5sums_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFileChecksumResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFileChecksumResponse_descriptor_;
  metadata.reflection = GetFileChecksumResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListProcessesRequest::kIncludeUsersFieldNumber;
const int ListProcessesRequest::kExcludeUsersFieldNumber;
const int ListProcessesRequest::kGetLoadFieldNumber;
#endif  // !_MSC_VER

ListProcessesRequest::ListProcessesRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListProcessesRequest::InitAsDefaultInstance() {
}

ListProcessesRequest::ListProcessesRequest(const ListProcessesRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListProcessesRequest::SharedCtor() {
  _cached_size_ = 0;
  get_load_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListProcessesRequest::~ListProcessesRequest() {
  SharedDtor();
}

void ListProcessesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListProcessesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListProcessesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListProcessesRequest_descriptor_;
}

const ListProcessesRequest& ListProcessesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

ListProcessesRequest* ListProcessesRequest::default_instance_ = NULL;

ListProcessesRequest* ListProcessesRequest::New() const {
  return new ListProcessesRequest;
}

void ListProcessesRequest::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    get_load_ = false;
  }
  include_users_.Clear();
  exclude_users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListProcessesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string include_users = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_include_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_include_users()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->include_users(0).data(), this->include_users(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_include_users;
        if (input->ExpectTag(18)) goto parse_exclude_users;
        break;
      }
      
      // repeated string exclude_users = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exclude_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exclude_users()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exclude_users(0).data(), this->exclude_users(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exclude_users;
        if (input->ExpectTag(24)) goto parse_get_load;
        break;
      }
      
      // optional bool get_load = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_load:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_load_)));
          set_has_get_load();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListProcessesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string include_users = 1;
  for (int i = 0; i < this->include_users_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->include_users(i).data(), this->include_users(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->include_users(i), output);
  }
  
  // repeated string exclude_users = 2;
  for (int i = 0; i < this->exclude_users_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->exclude_users(i).data(), this->exclude_users(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->exclude_users(i), output);
  }
  
  // optional bool get_load = 3 [default = false];
  if (has_get_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->get_load(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListProcessesRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string include_users = 1;
  for (int i = 0; i < this->include_users_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->include_users(i).data(), this->include_users(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->include_users(i), target);
  }
  
  // repeated string exclude_users = 2;
  for (int i = 0; i < this->exclude_users_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exclude_users(i).data(), this->exclude_users(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->exclude_users(i), target);
  }
  
  // optional bool get_load = 3 [default = false];
  if (has_get_load()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->get_load(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListProcessesRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool get_load = 3 [default = false];
    if (has_get_load()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated string include_users = 1;
  total_size += 1 * this->include_users_size();
  for (int i = 0; i < this->include_users_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->include_users(i));
  }
  
  // repeated string exclude_users = 2;
  total_size += 1 * this->exclude_users_size();
  for (int i = 0; i < this->exclude_users_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exclude_users(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListProcessesRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListProcessesRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListProcessesRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListProcessesRequest::MergeFrom(const ListProcessesRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  include_users_.MergeFrom(from.include_users_);
  exclude_users_.MergeFrom(from.exclude_users_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_get_load()) {
      set_get_load(from.get_load());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListProcessesRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListProcessesRequest::CopyFrom(const ListProcessesRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProcessesRequest::IsInitialized() const {
  
  return true;
}

void ListProcessesRequest::Swap(ListProcessesRequest* other) {
  if (other != this) {
    include_users_.Swap(&other->include_users_);
    exclude_users_.Swap(&other->exclude_users_);
    std::swap(get_load_, other->get_load_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListProcessesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListProcessesRequest_descriptor_;
  metadata.reflection = ListProcessesRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListProcessesResponse_Process::kPidFieldNumber;
const int ListProcessesResponse_Process::kProcStatFieldNumber;
const int ListProcessesResponse_Process::kProcStatusFieldNumber;
const int ListProcessesResponse_Process::kCmdlineFieldNumber;
const int ListProcessesResponse_Process::kExeFileFieldNumber;
#endif  // !_MSC_VER

ListProcessesResponse_Process::ListProcessesResponse_Process()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListProcessesResponse_Process::InitAsDefaultInstance() {
}

ListProcessesResponse_Process::ListProcessesResponse_Process(const ListProcessesResponse_Process& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListProcessesResponse_Process::SharedCtor() {
  _cached_size_ = 0;
  pid_ = 0;
  proc_stat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proc_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cmdline_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exe_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListProcessesResponse_Process::~ListProcessesResponse_Process() {
  SharedDtor();
}

void ListProcessesResponse_Process::SharedDtor() {
  if (proc_stat_ != &::google::protobuf::internal::kEmptyString) {
    delete proc_stat_;
  }
  if (proc_status_ != &::google::protobuf::internal::kEmptyString) {
    delete proc_status_;
  }
  if (cmdline_ != &::google::protobuf::internal::kEmptyString) {
    delete cmdline_;
  }
  if (exe_file_ != &::google::protobuf::internal::kEmptyString) {
    delete exe_file_;
  }
  if (this != default_instance_) {
  }
}

void ListProcessesResponse_Process::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListProcessesResponse_Process::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListProcessesResponse_Process_descriptor_;
}

const ListProcessesResponse_Process& ListProcessesResponse_Process::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

ListProcessesResponse_Process* ListProcessesResponse_Process::default_instance_ = NULL;

ListProcessesResponse_Process* ListProcessesResponse_Process::New() const {
  return new ListProcessesResponse_Process;
}

void ListProcessesResponse_Process::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pid_ = 0;
    if (has_proc_stat()) {
      if (proc_stat_ != &::google::protobuf::internal::kEmptyString) {
        proc_stat_->clear();
      }
    }
    if (has_proc_status()) {
      if (proc_status_ != &::google::protobuf::internal::kEmptyString) {
        proc_status_->clear();
      }
    }
    if (has_cmdline()) {
      if (cmdline_ != &::google::protobuf::internal::kEmptyString) {
        cmdline_->clear();
      }
    }
    if (has_exe_file()) {
      if (exe_file_ != &::google::protobuf::internal::kEmptyString) {
        exe_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListProcessesResponse_Process::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_proc_stat;
        break;
      }
      
      // required string proc_stat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_stat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proc_stat().data(), this->proc_stat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_proc_status;
        break;
      }
      
      // required string proc_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proc_status().data(), this->proc_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cmdline;
        break;
      }
      
      // optional string cmdline = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmdline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdline()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmdline().data(), this->cmdline().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_exe_file;
        break;
      }
      
      // optional string exe_file = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exe_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exe_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exe_file().data(), this->exe_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListProcessesResponse_Process::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }
  
  // required string proc_stat = 2;
  if (has_proc_stat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_stat().data(), this->proc_stat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->proc_stat(), output);
  }
  
  // required string proc_status = 3;
  if (has_proc_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_status().data(), this->proc_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->proc_status(), output);
  }
  
  // optional string cmdline = 4;
  if (has_cmdline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmdline().data(), this->cmdline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cmdline(), output);
  }
  
  // optional string exe_file = 5;
  if (has_exe_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exe_file().data(), this->exe_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->exe_file(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListProcessesResponse_Process::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }
  
  // required string proc_stat = 2;
  if (has_proc_stat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_stat().data(), this->proc_stat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proc_stat(), target);
  }
  
  // required string proc_status = 3;
  if (has_proc_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_status().data(), this->proc_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->proc_status(), target);
  }
  
  // optional string cmdline = 4;
  if (has_cmdline()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmdline().data(), this->cmdline().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cmdline(), target);
  }
  
  // optional string exe_file = 5;
  if (has_exe_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exe_file().data(), this->exe_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exe_file(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListProcessesResponse_Process::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
    // required string proc_stat = 2;
    if (has_proc_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proc_stat());
    }
    
    // required string proc_status = 3;
    if (has_proc_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proc_status());
    }
    
    // optional string cmdline = 4;
    if (has_cmdline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmdline());
    }
    
    // optional string exe_file = 5;
    if (has_exe_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exe_file());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListProcessesResponse_Process::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListProcessesResponse_Process* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListProcessesResponse_Process*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListProcessesResponse_Process::MergeFrom(const ListProcessesResponse_Process& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_proc_stat()) {
      set_proc_stat(from.proc_stat());
    }
    if (from.has_proc_status()) {
      set_proc_status(from.proc_status());
    }
    if (from.has_cmdline()) {
      set_cmdline(from.cmdline());
    }
    if (from.has_exe_file()) {
      set_exe_file(from.exe_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListProcessesResponse_Process::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListProcessesResponse_Process::CopyFrom(const ListProcessesResponse_Process& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProcessesResponse_Process::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ListProcessesResponse_Process::Swap(ListProcessesResponse_Process* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(proc_stat_, other->proc_stat_);
    std::swap(proc_status_, other->proc_status_);
    std::swap(cmdline_, other->cmdline_);
    std::swap(exe_file_, other->exe_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListProcessesResponse_Process::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListProcessesResponse_Process_descriptor_;
  metadata.reflection = ListProcessesResponse_Process_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ListProcessesResponse::kProcessesFieldNumber;
const int ListProcessesResponse::kMeminfoFieldNumber;
const int ListProcessesResponse::kProcStatFieldNumber;
const int ListProcessesResponse::kLoadavgFieldNumber;
const int ListProcessesResponse::kDiskstatsFieldNumber;
const int ListProcessesResponse::kNetDevFieldNumber;
const int ListProcessesResponse::kNetTcpFieldNumber;
const int ListProcessesResponse::kDiskUsageFieldNumber;
const int ListProcessesResponse::kVersionFieldNumber;
const int ListProcessesResponse::kCpuinfoFieldNumber;
#endif  // !_MSC_VER

ListProcessesResponse::ListProcessesResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListProcessesResponse::InitAsDefaultInstance() {
}

ListProcessesResponse::ListProcessesResponse(const ListProcessesResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListProcessesResponse::SharedCtor() {
  _cached_size_ = 0;
  meminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proc_stat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loadavg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  diskstats_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  net_dev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  net_tcp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cpuinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListProcessesResponse::~ListProcessesResponse() {
  SharedDtor();
}

void ListProcessesResponse::SharedDtor() {
  if (meminfo_ != &::google::protobuf::internal::kEmptyString) {
    delete meminfo_;
  }
  if (proc_stat_ != &::google::protobuf::internal::kEmptyString) {
    delete proc_stat_;
  }
  if (loadavg_ != &::google::protobuf::internal::kEmptyString) {
    delete loadavg_;
  }
  if (diskstats_ != &::google::protobuf::internal::kEmptyString) {
    delete diskstats_;
  }
  if (net_dev_ != &::google::protobuf::internal::kEmptyString) {
    delete net_dev_;
  }
  if (net_tcp_ != &::google::protobuf::internal::kEmptyString) {
    delete net_tcp_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (cpuinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete cpuinfo_;
  }
  if (this != default_instance_) {
  }
}

void ListProcessesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListProcessesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListProcessesResponse_descriptor_;
}

const ListProcessesResponse& ListProcessesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

ListProcessesResponse* ListProcessesResponse::default_instance_ = NULL;

ListProcessesResponse* ListProcessesResponse::New() const {
  return new ListProcessesResponse;
}

void ListProcessesResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_meminfo()) {
      if (meminfo_ != &::google::protobuf::internal::kEmptyString) {
        meminfo_->clear();
      }
    }
    if (has_proc_stat()) {
      if (proc_stat_ != &::google::protobuf::internal::kEmptyString) {
        proc_stat_->clear();
      }
    }
    if (has_loadavg()) {
      if (loadavg_ != &::google::protobuf::internal::kEmptyString) {
        loadavg_->clear();
      }
    }
    if (has_diskstats()) {
      if (diskstats_ != &::google::protobuf::internal::kEmptyString) {
        diskstats_->clear();
      }
    }
    if (has_net_dev()) {
      if (net_dev_ != &::google::protobuf::internal::kEmptyString) {
        net_dev_->clear();
      }
    }
    if (has_net_tcp()) {
      if (net_tcp_ != &::google::protobuf::internal::kEmptyString) {
        net_tcp_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_cpuinfo()) {
      if (cpuinfo_ != &::google::protobuf::internal::kEmptyString) {
        cpuinfo_->clear();
      }
    }
  }
  processes_.Clear();
  disk_usage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListProcessesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cetty.zurg.slave.ListProcessesResponse.Process processes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_processes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_processes;
        if (input->ExpectTag(18)) goto parse_meminfo;
        break;
      }
      
      // optional string meminfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meminfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meminfo().data(), this->meminfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_proc_stat;
        break;
      }
      
      // optional string proc_stat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_stat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proc_stat().data(), this->proc_stat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_loadavg;
        break;
      }
      
      // optional string loadavg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loadavg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loadavg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loadavg().data(), this->loadavg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_diskstats;
        break;
      }
      
      // optional string diskstats = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diskstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskstats()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->diskstats().data(), this->diskstats().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_net_dev;
        break;
      }
      
      // optional string net_dev = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net_dev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->net_dev().data(), this->net_dev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_net_tcp;
        break;
      }
      
      // optional string net_tcp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net_tcp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net_tcp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->net_tcp().data(), this->net_tcp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_disk_usage;
        break;
      }
      
      // repeated .cetty.zurg.slave.DiskUsage disk_usage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_usage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_disk_usage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_disk_usage;
        if (input->ExpectTag(74)) goto parse_version;
        break;
      }
      
      // optional string version = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_cpuinfo;
        break;
      }
      
      // optional string cpuinfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cpuinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpuinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cpuinfo().data(), this->cpuinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListProcessesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cetty.zurg.slave.ListProcessesResponse.Process processes = 1;
  for (int i = 0; i < this->processes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->processes(i), output);
  }
  
  // optional string meminfo = 2;
  if (has_meminfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meminfo().data(), this->meminfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->meminfo(), output);
  }
  
  // optional string proc_stat = 3;
  if (has_proc_stat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_stat().data(), this->proc_stat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->proc_stat(), output);
  }
  
  // optional string loadavg = 4;
  if (has_loadavg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loadavg().data(), this->loadavg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->loadavg(), output);
  }
  
  // optional string diskstats = 5;
  if (has_diskstats()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diskstats().data(), this->diskstats().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->diskstats(), output);
  }
  
  // optional string net_dev = 6;
  if (has_net_dev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->net_dev().data(), this->net_dev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->net_dev(), output);
  }
  
  // optional string net_tcp = 7;
  if (has_net_tcp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->net_tcp().data(), this->net_tcp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->net_tcp(), output);
  }
  
  // repeated .cetty.zurg.slave.DiskUsage disk_usage = 8;
  for (int i = 0; i < this->disk_usage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->disk_usage(i), output);
  }
  
  // optional string version = 9;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->version(), output);
  }
  
  // optional string cpuinfo = 10;
  if (has_cpuinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpuinfo().data(), this->cpuinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->cpuinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListProcessesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cetty.zurg.slave.ListProcessesResponse.Process processes = 1;
  for (int i = 0; i < this->processes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->processes(i), target);
  }
  
  // optional string meminfo = 2;
  if (has_meminfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meminfo().data(), this->meminfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->meminfo(), target);
  }
  
  // optional string proc_stat = 3;
  if (has_proc_stat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_stat().data(), this->proc_stat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->proc_stat(), target);
  }
  
  // optional string loadavg = 4;
  if (has_loadavg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loadavg().data(), this->loadavg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->loadavg(), target);
  }
  
  // optional string diskstats = 5;
  if (has_diskstats()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diskstats().data(), this->diskstats().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->diskstats(), target);
  }
  
  // optional string net_dev = 6;
  if (has_net_dev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->net_dev().data(), this->net_dev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->net_dev(), target);
  }
  
  // optional string net_tcp = 7;
  if (has_net_tcp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->net_tcp().data(), this->net_tcp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->net_tcp(), target);
  }
  
  // repeated .cetty.zurg.slave.DiskUsage disk_usage = 8;
  for (int i = 0; i < this->disk_usage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->disk_usage(i), target);
  }
  
  // optional string version = 9;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->version(), target);
  }
  
  // optional string cpuinfo = 10;
  if (has_cpuinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpuinfo().data(), this->cpuinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->cpuinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListProcessesResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string meminfo = 2;
    if (has_meminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meminfo());
    }
    
    // optional string proc_stat = 3;
    if (has_proc_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proc_stat());
    }
    
    // optional string loadavg = 4;
    if (has_loadavg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loadavg());
    }
    
    // optional string diskstats = 5;
    if (has_diskstats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diskstats());
    }
    
    // optional string net_dev = 6;
    if (has_net_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net_dev());
    }
    
    // optional string net_tcp = 7;
    if (has_net_tcp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net_tcp());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string version = 9;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional string cpuinfo = 10;
    if (has_cpuinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpuinfo());
    }
    
  }
  // repeated .cetty.zurg.slave.ListProcessesResponse.Process processes = 1;
  total_size += 1 * this->processes_size();
  for (int i = 0; i < this->processes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->processes(i));
  }
  
  // repeated .cetty.zurg.slave.DiskUsage disk_usage = 8;
  total_size += 1 * this->disk_usage_size();
  for (int i = 0; i < this->disk_usage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->disk_usage(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListProcessesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListProcessesResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListProcessesResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListProcessesResponse::MergeFrom(const ListProcessesResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  processes_.MergeFrom(from.processes_);
  disk_usage_.MergeFrom(from.disk_usage_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_meminfo()) {
      set_meminfo(from.meminfo());
    }
    if (from.has_proc_stat()) {
      set_proc_stat(from.proc_stat());
    }
    if (from.has_loadavg()) {
      set_loadavg(from.loadavg());
    }
    if (from.has_diskstats()) {
      set_diskstats(from.diskstats());
    }
    if (from.has_net_dev()) {
      set_net_dev(from.net_dev());
    }
    if (from.has_net_tcp()) {
      set_net_tcp(from.net_tcp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_cpuinfo()) {
      set_cpuinfo(from.cpuinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListProcessesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListProcessesResponse::CopyFrom(const ListProcessesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProcessesResponse::IsInitialized() const {
  
  for (int i = 0; i < processes_size(); i++) {
    if (!this->processes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < disk_usage_size(); i++) {
    if (!this->disk_usage(i).IsInitialized()) return false;
  }
  return true;
}

void ListProcessesResponse::Swap(ListProcessesResponse* other) {
  if (other != this) {
    processes_.Swap(&other->processes_);
    std::swap(meminfo_, other->meminfo_);
    std::swap(proc_stat_, other->proc_stat_);
    std::swap(loadavg_, other->loadavg_);
    std::swap(diskstats_, other->diskstats_);
    std::swap(net_dev_, other->net_dev_);
    std::swap(net_tcp_, other->net_tcp_);
    disk_usage_.Swap(&other->disk_usage_);
    std::swap(version_, other->version_);
    std::swap(cpuinfo_, other->cpuinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListProcessesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListProcessesResponse_descriptor_;
  metadata.reflection = ListProcessesResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RunCommandRequest::_default_cwd_("/tmp");
#ifndef _MSC_VER
const int RunCommandRequest::kCommandFieldNumber;
const int RunCommandRequest::kCwdFieldNumber;
const int RunCommandRequest::kArgsFieldNumber;
const int RunCommandRequest::kEnvsFieldNumber;
const int RunCommandRequest::kEnvsOnlyFieldNumber;
const int RunCommandRequest::kMaxStdoutFieldNumber;
const int RunCommandRequest::kMaxStderrFieldNumber;
const int RunCommandRequest::kTimeoutFieldNumber;
const int RunCommandRequest::kMaxMemoryMbFieldNumber;
#endif  // !_MSC_VER

RunCommandRequest::RunCommandRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunCommandRequest::InitAsDefaultInstance() {
}

RunCommandRequest::RunCommandRequest(const RunCommandRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunCommandRequest::SharedCtor() {
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cwd_ = const_cast< ::std::string*>(&_default_cwd_);
  envs_only_ = false;
  max_stdout_ = 1048576;
  max_stderr_ = 1048576;
  timeout_ = 3000;
  max_memory_mb_ = 32768;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunCommandRequest::~RunCommandRequest() {
  SharedDtor();
}

void RunCommandRequest::SharedDtor() {
  if (command_ != &::google::protobuf::internal::kEmptyString) {
    delete command_;
  }
  if (cwd_ != &_default_cwd_) {
    delete cwd_;
  }
  if (this != default_instance_) {
  }
}

void RunCommandRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunCommandRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunCommandRequest_descriptor_;
}

const RunCommandRequest& RunCommandRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

RunCommandRequest* RunCommandRequest::default_instance_ = NULL;

RunCommandRequest* RunCommandRequest::New() const {
  return new RunCommandRequest;
}

void RunCommandRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::kEmptyString) {
        command_->clear();
      }
    }
    if (has_cwd()) {
      if (cwd_ != &_default_cwd_) {
        cwd_->assign(_default_cwd_);
      }
    }
    envs_only_ = false;
    max_stdout_ = 1048576;
    max_stderr_ = 1048576;
    timeout_ = 3000;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    max_memory_mb_ = 32768;
  }
  args_.Clear();
  envs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunCommandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cwd;
        break;
      }
      
      // optional string cwd = 2 [default = "/tmp"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cwd().data(), this->cwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }
      
      // repeated string args = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args(0).data(), this->args(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        if (input->ExpectTag(34)) goto parse_envs;
        break;
      }
      
      // repeated string envs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_envs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_envs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->envs(0).data(), this->envs(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_envs;
        if (input->ExpectTag(40)) goto parse_envs_only;
        break;
      }
      
      // optional bool envs_only = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_envs_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &envs_only_)));
          set_has_envs_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_stdout;
        break;
      }
      
      // optional int32 max_stdout = 6 [default = 1048576];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_stdout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_stdout_)));
          set_has_max_stdout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_stderr;
        break;
      }
      
      // optional int32 max_stderr = 7 [default = 1048576];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_stderr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_stderr_)));
          set_has_max_stderr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_timeout;
        break;
      }
      
      // optional int32 timeout = 8 [default = 3000];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_max_memory_mb;
        break;
      }
      
      // optional int32 max_memory_mb = 9 [default = 32768];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_memory_mb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_memory_mb_)));
          set_has_max_memory_mb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RunCommandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->command(), output);
  }
  
  // optional string cwd = 2 [default = "/tmp"];
  if (has_cwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cwd().data(), this->cwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cwd(), output);
  }
  
  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->args(i).data(), this->args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->args(i), output);
  }
  
  // repeated string envs = 4;
  for (int i = 0; i < this->envs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->envs(i).data(), this->envs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->envs(i), output);
  }
  
  // optional bool envs_only = 5 [default = false];
  if (has_envs_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->envs_only(), output);
  }
  
  // optional int32 max_stdout = 6 [default = 1048576];
  if (has_max_stdout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_stdout(), output);
  }
  
  // optional int32 max_stderr = 7 [default = 1048576];
  if (has_max_stderr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_stderr(), output);
  }
  
  // optional int32 timeout = 8 [default = 3000];
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->timeout(), output);
  }
  
  // optional int32 max_memory_mb = 9 [default = 32768];
  if (has_max_memory_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_memory_mb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunCommandRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }
  
  // optional string cwd = 2 [default = "/tmp"];
  if (has_cwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cwd().data(), this->cwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cwd(), target);
  }
  
  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->args(i), target);
  }
  
  // repeated string envs = 4;
  for (int i = 0; i < this->envs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->envs(i).data(), this->envs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->envs(i), target);
  }
  
  // optional bool envs_only = 5 [default = false];
  if (has_envs_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->envs_only(), target);
  }
  
  // optional int32 max_stdout = 6 [default = 1048576];
  if (has_max_stdout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_stdout(), target);
  }
  
  // optional int32 max_stderr = 7 [default = 1048576];
  if (has_max_stderr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_stderr(), target);
  }
  
  // optional int32 timeout = 8 [default = 3000];
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->timeout(), target);
  }
  
  // optional int32 max_memory_mb = 9 [default = 32768];
  if (has_max_memory_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_memory_mb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunCommandRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }
    
    // optional string cwd = 2 [default = "/tmp"];
    if (has_cwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cwd());
    }
    
    // optional bool envs_only = 5 [default = false];
    if (has_envs_only()) {
      total_size += 1 + 1;
    }
    
    // optional int32 max_stdout = 6 [default = 1048576];
    if (has_max_stdout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_stdout());
    }
    
    // optional int32 max_stderr = 7 [default = 1048576];
    if (has_max_stderr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_stderr());
    }
    
    // optional int32 timeout = 8 [default = 3000];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 max_memory_mb = 9 [default = 32768];
    if (has_max_memory_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_memory_mb());
    }
    
  }
  // repeated string args = 3;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }
  
  // repeated string envs = 4;
  total_size += 1 * this->envs_size();
  for (int i = 0; i < this->envs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->envs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunCommandRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunCommandRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunCommandRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunCommandRequest::MergeFrom(const RunCommandRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  envs_.MergeFrom(from.envs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_cwd()) {
      set_cwd(from.cwd());
    }
    if (from.has_envs_only()) {
      set_envs_only(from.envs_only());
    }
    if (from.has_max_stdout()) {
      set_max_stdout(from.max_stdout());
    }
    if (from.has_max_stderr()) {
      set_max_stderr(from.max_stderr());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_memory_mb()) {
      set_max_memory_mb(from.max_memory_mb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunCommandRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunCommandRequest::CopyFrom(const RunCommandRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunCommandRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RunCommandRequest::Swap(RunCommandRequest* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(cwd_, other->cwd_);
    args_.Swap(&other->args_);
    envs_.Swap(&other->envs_);
    std::swap(envs_only_, other->envs_only_);
    std::swap(max_stdout_, other->max_stdout_);
    std::swap(max_stderr_, other->max_stderr_);
    std::swap(timeout_, other->timeout_);
    std::swap(max_memory_mb_, other->max_memory_mb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunCommandRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunCommandRequest_descriptor_;
  metadata.reflection = RunCommandRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RunCommandResponse::kErrorCodeFieldNumber;
const int RunCommandResponse::kPidFieldNumber;
const int RunCommandResponse::kStatusFieldNumber;
const int RunCommandResponse::kStdOutputFieldNumber;
const int RunCommandResponse::kStdErrorFieldNumber;
const int RunCommandResponse::kExecutableFileFieldNumber;
const int RunCommandResponse::kStartTimeUsFieldNumber;
const int RunCommandResponse::kFinishTimeUsFieldNumber;
const int RunCommandResponse::kUserTimeFieldNumber;
const int RunCommandResponse::kSystemTimeFieldNumber;
const int RunCommandResponse::kMemoryMaxrssKbFieldNumber;
const int RunCommandResponse::kExitStatusFieldNumber;
const int RunCommandResponse::kSignaledFieldNumber;
const int RunCommandResponse::kCoredumpFieldNumber;
#endif  // !_MSC_VER

RunCommandResponse::RunCommandResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunCommandResponse::InitAsDefaultInstance() {
}

RunCommandResponse::RunCommandResponse(const RunCommandResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunCommandResponse::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  pid_ = 0;
  status_ = 0;
  std_output_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  std_error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  executable_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_time_us_ = GOOGLE_LONGLONG(0);
  finish_time_us_ = GOOGLE_LONGLONG(0);
  user_time_ = 0;
  system_time_ = 0;
  memory_maxrss_kb_ = GOOGLE_LONGLONG(0);
  exit_status_ = 0;
  signaled_ = 0;
  coredump_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunCommandResponse::~RunCommandResponse() {
  SharedDtor();
}

void RunCommandResponse::SharedDtor() {
  if (std_output_ != &::google::protobuf::internal::kEmptyString) {
    delete std_output_;
  }
  if (std_error_ != &::google::protobuf::internal::kEmptyString) {
    delete std_error_;
  }
  if (executable_file_ != &::google::protobuf::internal::kEmptyString) {
    delete executable_file_;
  }
  if (this != default_instance_) {
  }
}

void RunCommandResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunCommandResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunCommandResponse_descriptor_;
}

const RunCommandResponse& RunCommandResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

RunCommandResponse* RunCommandResponse::default_instance_ = NULL;

RunCommandResponse* RunCommandResponse::New() const {
  return new RunCommandResponse;
}

void RunCommandResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
    pid_ = 0;
    status_ = 0;
    if (has_std_output()) {
      if (std_output_ != &::google::protobuf::internal::kEmptyString) {
        std_output_->clear();
      }
    }
    if (has_std_error()) {
      if (std_error_ != &::google::protobuf::internal::kEmptyString) {
        std_error_->clear();
      }
    }
    if (has_executable_file()) {
      if (executable_file_ != &::google::protobuf::internal::kEmptyString) {
        executable_file_->clear();
      }
    }
    start_time_us_ = GOOGLE_LONGLONG(0);
    finish_time_us_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    user_time_ = 0;
    system_time_ = 0;
    memory_maxrss_kb_ = GOOGLE_LONGLONG(0);
    exit_status_ = 0;
    signaled_ = 0;
    coredump_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunCommandResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }
      
      // optional int32 pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }
      
      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_std_output;
        break;
      }
      
      // optional bytes std_output = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_std_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_std_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_std_error;
        break;
      }
      
      // optional bytes std_error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_std_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_std_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_executable_file;
        break;
      }
      
      // optional string executable_file = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executable_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->executable_file().data(), this->executable_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_start_time_us;
        break;
      }
      
      // optional int64 start_time_us = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_us_)));
          set_has_start_time_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_finish_time_us;
        break;
      }
      
      // optional int64 finish_time_us = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finish_time_us_)));
          set_has_finish_time_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_user_time;
        break;
      }
      
      // optional float user_time = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_user_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &user_time_)));
          set_has_user_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_system_time;
        break;
      }
      
      // optional float system_time = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_system_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &system_time_)));
          set_has_system_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_memory_maxrss_kb;
        break;
      }
      
      // optional int64 memory_maxrss_kb = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memory_maxrss_kb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &memory_maxrss_kb_)));
          set_has_memory_maxrss_kb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_exit_status;
        break;
      }
      
      // optional int32 exit_status = 30 [default = 0];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exit_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_status_)));
          set_has_exit_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_signaled;
        break;
      }
      
      // optional int32 signaled = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signaled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signaled_)));
          set_has_signaled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_coredump;
        break;
      }
      
      // optional bool coredump = 32 [default = false];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coredump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &coredump_)));
          set_has_coredump();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RunCommandResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }
  
  // optional int32 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pid(), output);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }
  
  // optional bytes std_output = 4;
  if (has_std_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->std_output(), output);
  }
  
  // optional bytes std_error = 5;
  if (has_std_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->std_error(), output);
  }
  
  // optional string executable_file = 6;
  if (has_executable_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executable_file().data(), this->executable_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->executable_file(), output);
  }
  
  // optional int64 start_time_us = 16;
  if (has_start_time_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->start_time_us(), output);
  }
  
  // optional int64 finish_time_us = 17;
  if (has_finish_time_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->finish_time_us(), output);
  }
  
  // optional float user_time = 18;
  if (has_user_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->user_time(), output);
  }
  
  // optional float system_time = 19;
  if (has_system_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->system_time(), output);
  }
  
  // optional int64 memory_maxrss_kb = 20;
  if (has_memory_maxrss_kb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->memory_maxrss_kb(), output);
  }
  
  // optional int32 exit_status = 30 [default = 0];
  if (has_exit_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->exit_status(), output);
  }
  
  // optional int32 signaled = 31 [default = 0];
  if (has_signaled()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->signaled(), output);
  }
  
  // optional bool coredump = 32 [default = false];
  if (has_coredump()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->coredump(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunCommandResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }
  
  // optional int32 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pid(), target);
  }
  
  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }
  
  // optional bytes std_output = 4;
  if (has_std_output()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->std_output(), target);
  }
  
  // optional bytes std_error = 5;
  if (has_std_error()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->std_error(), target);
  }
  
  // optional string executable_file = 6;
  if (has_executable_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executable_file().data(), this->executable_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->executable_file(), target);
  }
  
  // optional int64 start_time_us = 16;
  if (has_start_time_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->start_time_us(), target);
  }
  
  // optional int64 finish_time_us = 17;
  if (has_finish_time_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->finish_time_us(), target);
  }
  
  // optional float user_time = 18;
  if (has_user_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->user_time(), target);
  }
  
  // optional float system_time = 19;
  if (has_system_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->system_time(), target);
  }
  
  // optional int64 memory_maxrss_kb = 20;
  if (has_memory_maxrss_kb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->memory_maxrss_kb(), target);
  }
  
  // optional int32 exit_status = 30 [default = 0];
  if (has_exit_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->exit_status(), target);
  }
  
  // optional int32 signaled = 31 [default = 0];
  if (has_signaled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->signaled(), target);
  }
  
  // optional bool coredump = 32 [default = false];
  if (has_coredump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->coredump(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunCommandResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }
    
    // optional int32 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional bytes std_output = 4;
    if (has_std_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->std_output());
    }
    
    // optional bytes std_error = 5;
    if (has_std_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->std_error());
    }
    
    // optional string executable_file = 6;
    if (has_executable_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->executable_file());
    }
    
    // optional int64 start_time_us = 16;
    if (has_start_time_us()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time_us());
    }
    
    // optional int64 finish_time_us = 17;
    if (has_finish_time_us()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->finish_time_us());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float user_time = 18;
    if (has_user_time()) {
      total_size += 2 + 4;
    }
    
    // optional float system_time = 19;
    if (has_system_time()) {
      total_size += 2 + 4;
    }
    
    // optional int64 memory_maxrss_kb = 20;
    if (has_memory_maxrss_kb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->memory_maxrss_kb());
    }
    
    // optional int32 exit_status = 30 [default = 0];
    if (has_exit_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exit_status());
    }
    
    // optional int32 signaled = 31 [default = 0];
    if (has_signaled()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signaled());
    }
    
    // optional bool coredump = 32 [default = false];
    if (has_coredump()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunCommandResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunCommandResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunCommandResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunCommandResponse::MergeFrom(const RunCommandResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_std_output()) {
      set_std_output(from.std_output());
    }
    if (from.has_std_error()) {
      set_std_error(from.std_error());
    }
    if (from.has_executable_file()) {
      set_executable_file(from.executable_file());
    }
    if (from.has_start_time_us()) {
      set_start_time_us(from.start_time_us());
    }
    if (from.has_finish_time_us()) {
      set_finish_time_us(from.finish_time_us());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_user_time()) {
      set_user_time(from.user_time());
    }
    if (from.has_system_time()) {
      set_system_time(from.system_time());
    }
    if (from.has_memory_maxrss_kb()) {
      set_memory_maxrss_kb(from.memory_maxrss_kb());
    }
    if (from.has_exit_status()) {
      set_exit_status(from.exit_status());
    }
    if (from.has_signaled()) {
      set_signaled(from.signaled());
    }
    if (from.has_coredump()) {
      set_coredump(from.coredump());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunCommandResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunCommandResponse::CopyFrom(const RunCommandResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunCommandResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RunCommandResponse::Swap(RunCommandResponse* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(pid_, other->pid_);
    std::swap(status_, other->status_);
    std::swap(std_output_, other->std_output_);
    std::swap(std_error_, other->std_error_);
    std::swap(executable_file_, other->executable_file_);
    std::swap(start_time_us_, other->start_time_us_);
    std::swap(finish_time_us_, other->finish_time_us_);
    std::swap(user_time_, other->user_time_);
    std::swap(system_time_, other->system_time_);
    std::swap(memory_maxrss_kb_, other->memory_maxrss_kb_);
    std::swap(exit_status_, other->exit_status_);
    std::swap(signaled_, other->signaled_);
    std::swap(coredump_, other->coredump_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunCommandResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunCommandResponse_descriptor_;
  metadata.reflection = RunCommandResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RunScriptRequest::_default_cwd_("/tmp");
#ifndef _MSC_VER
const int RunScriptRequest::kScriptFieldNumber;
const int RunScriptRequest::kCwdFieldNumber;
const int RunScriptRequest::kArgsFieldNumber;
const int RunScriptRequest::kEnvsFieldNumber;
const int RunScriptRequest::kEnvsOnlyFieldNumber;
const int RunScriptRequest::kMaxStdoutFieldNumber;
const int RunScriptRequest::kMaxStderrFieldNumber;
const int RunScriptRequest::kTimeoutFieldNumber;
const int RunScriptRequest::kMaxMemoryMbFieldNumber;
const int RunScriptRequest::kInterpreterFieldNumber;
const int RunScriptRequest::kInterpreterArgsFieldNumber;
#endif  // !_MSC_VER

RunScriptRequest::RunScriptRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RunScriptRequest::InitAsDefaultInstance() {
}

RunScriptRequest::RunScriptRequest(const RunScriptRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RunScriptRequest::SharedCtor() {
  _cached_size_ = 0;
  script_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cwd_ = const_cast< ::std::string*>(&_default_cwd_);
  envs_only_ = false;
  max_stdout_ = 1048576;
  max_stderr_ = 1048576;
  timeout_ = 60;
  max_memory_mb_ = 32768;
  interpreter_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunScriptRequest::~RunScriptRequest() {
  SharedDtor();
}

void RunScriptRequest::SharedDtor() {
  if (script_ != &::google::protobuf::internal::kEmptyString) {
    delete script_;
  }
  if (cwd_ != &_default_cwd_) {
    delete cwd_;
  }
  if (interpreter_ != &::google::protobuf::internal::kEmptyString) {
    delete interpreter_;
  }
  if (this != default_instance_) {
  }
}

void RunScriptRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunScriptRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunScriptRequest_descriptor_;
}

const RunScriptRequest& RunScriptRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

RunScriptRequest* RunScriptRequest::default_instance_ = NULL;

RunScriptRequest* RunScriptRequest::New() const {
  return new RunScriptRequest;
}

void RunScriptRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_script()) {
      if (script_ != &::google::protobuf::internal::kEmptyString) {
        script_->clear();
      }
    }
    if (has_cwd()) {
      if (cwd_ != &_default_cwd_) {
        cwd_->assign(_default_cwd_);
      }
    }
    envs_only_ = false;
    max_stdout_ = 1048576;
    max_stderr_ = 1048576;
    timeout_ = 60;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    max_memory_mb_ = 32768;
    if (has_interpreter()) {
      if (interpreter_ != &::google::protobuf::internal::kEmptyString) {
        interpreter_->clear();
      }
    }
  }
  args_.Clear();
  envs_.Clear();
  interpreter_args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunScriptRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes script = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_script()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cwd;
        break;
      }
      
      // optional string cwd = 2 [default = "/tmp"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cwd().data(), this->cwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }
      
      // repeated string args = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args(0).data(), this->args(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        if (input->ExpectTag(34)) goto parse_envs;
        break;
      }
      
      // repeated string envs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_envs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_envs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->envs(0).data(), this->envs(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_envs;
        if (input->ExpectTag(40)) goto parse_envs_only;
        break;
      }
      
      // optional bool envs_only = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_envs_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &envs_only_)));
          set_has_envs_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_stdout;
        break;
      }
      
      // optional int32 max_stdout = 6 [default = 1048576];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_stdout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_stdout_)));
          set_has_max_stdout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_max_stderr;
        break;
      }
      
      // optional int32 max_stderr = 7 [default = 1048576];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_stderr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_stderr_)));
          set_has_max_stderr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_timeout;
        break;
      }
      
      // optional int32 timeout = 8 [default = 60];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_max_memory_mb;
        break;
      }
      
      // optional int32 max_memory_mb = 9 [default = 32768];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_memory_mb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_memory_mb_)));
          set_has_max_memory_mb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_interpreter;
        break;
      }
      
      // optional string interpreter = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interpreter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interpreter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->interpreter().data(), this->interpreter().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_interpreter_args;
        break;
      }
      
      // repeated string interpreter_args = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_interpreter_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_interpreter_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->interpreter_args(0).data(), this->interpreter_args(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_interpreter_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RunScriptRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes script = 1;
  if (has_script()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->script(), output);
  }
  
  // optional string cwd = 2 [default = "/tmp"];
  if (has_cwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cwd().data(), this->cwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cwd(), output);
  }
  
  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->args(i).data(), this->args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->args(i), output);
  }
  
  // repeated string envs = 4;
  for (int i = 0; i < this->envs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->envs(i).data(), this->envs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->envs(i), output);
  }
  
  // optional bool envs_only = 5 [default = false];
  if (has_envs_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->envs_only(), output);
  }
  
  // optional int32 max_stdout = 6 [default = 1048576];
  if (has_max_stdout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_stdout(), output);
  }
  
  // optional int32 max_stderr = 7 [default = 1048576];
  if (has_max_stderr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_stderr(), output);
  }
  
  // optional int32 timeout = 8 [default = 60];
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->timeout(), output);
  }
  
  // optional int32 max_memory_mb = 9 [default = 32768];
  if (has_max_memory_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_memory_mb(), output);
  }
  
  // optional string interpreter = 10;
  if (has_interpreter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->interpreter().data(), this->interpreter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->interpreter(), output);
  }
  
  // repeated string interpreter_args = 11;
  for (int i = 0; i < this->interpreter_args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->interpreter_args(i).data(), this->interpreter_args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->interpreter_args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RunScriptRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes script = 1;
  if (has_script()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->script(), target);
  }
  
  // optional string cwd = 2 [default = "/tmp"];
  if (has_cwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cwd().data(), this->cwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cwd(), target);
  }
  
  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->args(i), target);
  }
  
  // repeated string envs = 4;
  for (int i = 0; i < this->envs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->envs(i).data(), this->envs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->envs(i), target);
  }
  
  // optional bool envs_only = 5 [default = false];
  if (has_envs_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->envs_only(), target);
  }
  
  // optional int32 max_stdout = 6 [default = 1048576];
  if (has_max_stdout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_stdout(), target);
  }
  
  // optional int32 max_stderr = 7 [default = 1048576];
  if (has_max_stderr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_stderr(), target);
  }
  
  // optional int32 timeout = 8 [default = 60];
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->timeout(), target);
  }
  
  // optional int32 max_memory_mb = 9 [default = 32768];
  if (has_max_memory_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_memory_mb(), target);
  }
  
  // optional string interpreter = 10;
  if (has_interpreter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->interpreter().data(), this->interpreter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->interpreter(), target);
  }
  
  // repeated string interpreter_args = 11;
  for (int i = 0; i < this->interpreter_args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->interpreter_args(i).data(), this->interpreter_args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->interpreter_args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RunScriptRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes script = 1;
    if (has_script()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->script());
    }
    
    // optional string cwd = 2 [default = "/tmp"];
    if (has_cwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cwd());
    }
    
    // optional bool envs_only = 5 [default = false];
    if (has_envs_only()) {
      total_size += 1 + 1;
    }
    
    // optional int32 max_stdout = 6 [default = 1048576];
    if (has_max_stdout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_stdout());
    }
    
    // optional int32 max_stderr = 7 [default = 1048576];
    if (has_max_stderr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_stderr());
    }
    
    // optional int32 timeout = 8 [default = 60];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 max_memory_mb = 9 [default = 32768];
    if (has_max_memory_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_memory_mb());
    }
    
    // optional string interpreter = 10;
    if (has_interpreter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interpreter());
    }
    
  }
  // repeated string args = 3;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }
  
  // repeated string envs = 4;
  total_size += 1 * this->envs_size();
  for (int i = 0; i < this->envs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->envs(i));
  }
  
  // repeated string interpreter_args = 11;
  total_size += 1 * this->interpreter_args_size();
  for (int i = 0; i < this->interpreter_args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->interpreter_args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunScriptRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunScriptRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunScriptRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunScriptRequest::MergeFrom(const RunScriptRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  envs_.MergeFrom(from.envs_);
  interpreter_args_.MergeFrom(from.interpreter_args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_script()) {
      set_script(from.script());
    }
    if (from.has_cwd()) {
      set_cwd(from.cwd());
    }
    if (from.has_envs_only()) {
      set_envs_only(from.envs_only());
    }
    if (from.has_max_stdout()) {
      set_max_stdout(from.max_stdout());
    }
    if (from.has_max_stderr()) {
      set_max_stderr(from.max_stderr());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_memory_mb()) {
      set_max_memory_mb(from.max_memory_mb());
    }
    if (from.has_interpreter()) {
      set_interpreter(from.interpreter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunScriptRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunScriptRequest::CopyFrom(const RunScriptRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunScriptRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RunScriptRequest::Swap(RunScriptRequest* other) {
  if (other != this) {
    std::swap(script_, other->script_);
    std::swap(cwd_, other->cwd_);
    args_.Swap(&other->args_);
    envs_.Swap(&other->envs_);
    std::swap(envs_only_, other->envs_only_);
    std::swap(max_stdout_, other->max_stdout_);
    std::swap(max_stderr_, other->max_stderr_);
    std::swap(timeout_, other->timeout_);
    std::swap(max_memory_mb_, other->max_memory_mb_);
    std::swap(interpreter_, other->interpreter_);
    interpreter_args_.Swap(&other->interpreter_args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunScriptRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunScriptRequest_descriptor_;
  metadata.reflection = RunScriptRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplicationStatus::kStateFieldNumber;
const int ApplicationStatus::kNameFieldNumber;
const int ApplicationStatus::kPidFieldNumber;
const int ApplicationStatus::kExecutableFileFieldNumber;
const int ApplicationStatus::kCwdFieldNumber;
const int ApplicationStatus::kMessageFieldNumber;
const int ApplicationStatus::kSlaveNameFieldNumber;
const int ApplicationStatus::kStartTimeUsFieldNumber;
const int ApplicationStatus::kLastStopTimeUsFieldNumber;
const int ApplicationStatus::kProcStatFieldNumber;
const int ApplicationStatus::kProcStatusFieldNumber;
const int ApplicationStatus::kLastExitStatusFieldNumber;
const int ApplicationStatus::kLastSignaledFieldNumber;
const int ApplicationStatus::kLastCoredumpFieldNumber;
#endif  // !_MSC_VER

ApplicationStatus::ApplicationStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplicationStatus::InitAsDefaultInstance() {
}

ApplicationStatus::ApplicationStatus(const ApplicationStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplicationStatus::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pid_ = 0;
  executable_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  slave_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  start_time_us_ = GOOGLE_LONGLONG(0);
  last_stop_time_us_ = GOOGLE_LONGLONG(0);
  proc_stat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proc_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_exit_status_ = 0;
  last_signaled_ = 0;
  last_coredump_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplicationStatus::~ApplicationStatus() {
  SharedDtor();
}

void ApplicationStatus::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (executable_file_ != &::google::protobuf::internal::kEmptyString) {
    delete executable_file_;
  }
  if (cwd_ != &::google::protobuf::internal::kEmptyString) {
    delete cwd_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (slave_name_ != &::google::protobuf::internal::kEmptyString) {
    delete slave_name_;
  }
  if (proc_stat_ != &::google::protobuf::internal::kEmptyString) {
    delete proc_stat_;
  }
  if (proc_status_ != &::google::protobuf::internal::kEmptyString) {
    delete proc_status_;
  }
  if (this != default_instance_) {
  }
}

void ApplicationStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplicationStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationStatus_descriptor_;
}

const ApplicationStatus& ApplicationStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

ApplicationStatus* ApplicationStatus::default_instance_ = NULL;

ApplicationStatus* ApplicationStatus::New() const {
  return new ApplicationStatus;
}

void ApplicationStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    pid_ = 0;
    if (has_executable_file()) {
      if (executable_file_ != &::google::protobuf::internal::kEmptyString) {
        executable_file_->clear();
      }
    }
    if (has_cwd()) {
      if (cwd_ != &::google::protobuf::internal::kEmptyString) {
        cwd_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_slave_name()) {
      if (slave_name_ != &::google::protobuf::internal::kEmptyString) {
        slave_name_->clear();
      }
    }
    start_time_us_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_stop_time_us_ = GOOGLE_LONGLONG(0);
    if (has_proc_stat()) {
      if (proc_stat_ != &::google::protobuf::internal::kEmptyString) {
        proc_stat_->clear();
      }
    }
    if (has_proc_status()) {
      if (proc_status_ != &::google::protobuf::internal::kEmptyString) {
        proc_status_->clear();
      }
    }
    last_exit_status_ = 0;
    last_signaled_ = 0;
    last_coredump_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplicationStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cetty.zurg.slave.ApplicationState state = 1 [default = kUnknown];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (cetty::zurg::slave::ApplicationState_IsValid(value)) {
            set_state(static_cast< cetty::zurg::slave::ApplicationState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pid;
        break;
      }
      
      // optional int32 pid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_executable_file;
        break;
      }
      
      // optional string executable_file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_executable_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->executable_file().data(), this->executable_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cwd;
        break;
      }
      
      // optional string cwd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cwd().data(), this->cwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_message;
        break;
      }
      
      // optional string message = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_slave_name;
        break;
      }
      
      // optional string slave_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slave_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slave_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slave_name().data(), this->slave_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_start_time_us;
        break;
      }
      
      // optional int64 start_time_us = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_us_)));
          set_has_start_time_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_last_stop_time_us;
        break;
      }
      
      // optional int64 last_stop_time_us = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_stop_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_stop_time_us_)));
          set_has_last_stop_time_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_proc_stat;
        break;
      }
      
      // optional string proc_stat = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_stat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proc_stat().data(), this->proc_stat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_proc_status;
        break;
      }
      
      // optional string proc_status = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proc_status().data(), this->proc_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_last_exit_status;
        break;
      }
      
      // optional int32 last_exit_status = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_exit_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_exit_status_)));
          set_has_last_exit_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_last_signaled;
        break;
      }
      
      // optional int32 last_signaled = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_signaled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_signaled_)));
          set_has_last_signaled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_last_coredump;
        break;
      }
      
      // optional bool last_coredump = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_coredump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_coredump_)));
          set_has_last_coredump();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplicationStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cetty.zurg.slave.ApplicationState state = 1 [default = kUnknown];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 pid = 3;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pid(), output);
  }
  
  // optional string executable_file = 4;
  if (has_executable_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executable_file().data(), this->executable_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->executable_file(), output);
  }
  
  // optional string cwd = 5;
  if (has_cwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cwd().data(), this->cwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cwd(), output);
  }
  
  // optional string message = 6;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->message(), output);
  }
  
  // optional string slave_name = 8;
  if (has_slave_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slave_name().data(), this->slave_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->slave_name(), output);
  }
  
  // optional int64 start_time_us = 10;
  if (has_start_time_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->start_time_us(), output);
  }
  
  // optional int64 last_stop_time_us = 11;
  if (has_last_stop_time_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->last_stop_time_us(), output);
  }
  
  // optional string proc_stat = 12;
  if (has_proc_stat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_stat().data(), this->proc_stat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->proc_stat(), output);
  }
  
  // optional string proc_status = 13;
  if (has_proc_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_status().data(), this->proc_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->proc_status(), output);
  }
  
  // optional int32 last_exit_status = 30;
  if (has_last_exit_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->last_exit_status(), output);
  }
  
  // optional int32 last_signaled = 31;
  if (has_last_signaled()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->last_signaled(), output);
  }
  
  // optional bool last_coredump = 32;
  if (has_last_coredump()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->last_coredump(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplicationStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cetty.zurg.slave.ApplicationState state = 1 [default = kUnknown];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 pid = 3;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pid(), target);
  }
  
  // optional string executable_file = 4;
  if (has_executable_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->executable_file().data(), this->executable_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->executable_file(), target);
  }
  
  // optional string cwd = 5;
  if (has_cwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cwd().data(), this->cwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cwd(), target);
  }
  
  // optional string message = 6;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->message(), target);
  }
  
  // optional string slave_name = 8;
  if (has_slave_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slave_name().data(), this->slave_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->slave_name(), target);
  }
  
  // optional int64 start_time_us = 10;
  if (has_start_time_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->start_time_us(), target);
  }
  
  // optional int64 last_stop_time_us = 11;
  if (has_last_stop_time_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->last_stop_time_us(), target);
  }
  
  // optional string proc_stat = 12;
  if (has_proc_stat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_stat().data(), this->proc_stat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->proc_stat(), target);
  }
  
  // optional string proc_status = 13;
  if (has_proc_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_status().data(), this->proc_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->proc_status(), target);
  }
  
  // optional int32 last_exit_status = 30;
  if (has_last_exit_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->last_exit_status(), target);
  }
  
  // optional int32 last_signaled = 31;
  if (has_last_signaled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->last_signaled(), target);
  }
  
  // optional bool last_coredump = 32;
  if (has_last_coredump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->last_coredump(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplicationStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cetty.zurg.slave.ApplicationState state = 1 [default = kUnknown];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 pid = 3;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
    // optional string executable_file = 4;
    if (has_executable_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->executable_file());
    }
    
    // optional string cwd = 5;
    if (has_cwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cwd());
    }
    
    // optional string message = 6;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
    // optional string slave_name = 8;
    if (has_slave_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slave_name());
    }
    
    // optional int64 start_time_us = 10;
    if (has_start_time_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time_us());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 last_stop_time_us = 11;
    if (has_last_stop_time_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_stop_time_us());
    }
    
    // optional string proc_stat = 12;
    if (has_proc_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proc_stat());
    }
    
    // optional string proc_status = 13;
    if (has_proc_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proc_status());
    }
    
    // optional int32 last_exit_status = 30;
    if (has_last_exit_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_exit_status());
    }
    
    // optional int32 last_signaled = 31;
    if (has_last_signaled()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_signaled());
    }
    
    // optional bool last_coredump = 32;
    if (has_last_coredump()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplicationStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplicationStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplicationStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplicationStatus::MergeFrom(const ApplicationStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_executable_file()) {
      set_executable_file(from.executable_file());
    }
    if (from.has_cwd()) {
      set_cwd(from.cwd());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_slave_name()) {
      set_slave_name(from.slave_name());
    }
    if (from.has_start_time_us()) {
      set_start_time_us(from.start_time_us());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_stop_time_us()) {
      set_last_stop_time_us(from.last_stop_time_us());
    }
    if (from.has_proc_stat()) {
      set_proc_stat(from.proc_stat());
    }
    if (from.has_proc_status()) {
      set_proc_status(from.proc_status());
    }
    if (from.has_last_exit_status()) {
      set_last_exit_status(from.last_exit_status());
    }
    if (from.has_last_signaled()) {
      set_last_signaled(from.last_signaled());
    }
    if (from.has_last_coredump()) {
      set_last_coredump(from.last_coredump());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplicationStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationStatus::CopyFrom(const ApplicationStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ApplicationStatus::Swap(ApplicationStatus* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(name_, other->name_);
    std::swap(pid_, other->pid_);
    std::swap(executable_file_, other->executable_file_);
    std::swap(cwd_, other->cwd_);
    std::swap(message_, other->message_);
    std::swap(slave_name_, other->slave_name_);
    std::swap(start_time_us_, other->start_time_us_);
    std::swap(last_stop_time_us_, other->last_stop_time_us_);
    std::swap(proc_stat_, other->proc_stat_);
    std::swap(proc_status_, other->proc_status_);
    std::swap(last_exit_status_, other->last_exit_status_);
    std::swap(last_signaled_, other->last_signaled_);
    std::swap(last_coredump_, other->last_coredump_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplicationStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplicationStatus_descriptor_;
  metadata.reflection = ApplicationStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddApplicationRequest::kNameFieldNumber;
const int AddApplicationRequest::kBinaryFieldNumber;
const int AddApplicationRequest::kArgsFieldNumber;
const int AddApplicationRequest::kEnvsFieldNumber;
const int AddApplicationRequest::kEnvsOnlyFieldNumber;
const int AddApplicationRequest::kRedirectStdoutFieldNumber;
const int AddApplicationRequest::kRedirectStderrFieldNumber;
const int AddApplicationRequest::kSlaveNameFieldNumber;
const int AddApplicationRequest::kMaxMemoryMbFieldNumber;
const int AddApplicationRequest::kCommentFieldNumber;
const int AddApplicationRequest::kMd5SumFilesFieldNumber;
const int AddApplicationRequest::kExpectedMd5SumsFieldNumber;
const int AddApplicationRequest::kMd5SumNowFieldNumber;
#endif  // !_MSC_VER

AddApplicationRequest::AddApplicationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddApplicationRequest::InitAsDefaultInstance() {
}

AddApplicationRequest::AddApplicationRequest(const AddApplicationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddApplicationRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  binary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  envs_only_ = false;
  redirect_stdout_ = true;
  redirect_stderr_ = true;
  slave_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  max_memory_mb_ = 32768;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  md5sum_now_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddApplicationRequest::~AddApplicationRequest() {
  SharedDtor();
}

void AddApplicationRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (binary_ != &::google::protobuf::internal::kEmptyString) {
    delete binary_;
  }
  if (slave_name_ != &::google::protobuf::internal::kEmptyString) {
    delete slave_name_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void AddApplicationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddApplicationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddApplicationRequest_descriptor_;
}

const AddApplicationRequest& AddApplicationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

AddApplicationRequest* AddApplicationRequest::default_instance_ = NULL;

AddApplicationRequest* AddApplicationRequest::New() const {
  return new AddApplicationRequest;
}

void AddApplicationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_binary()) {
      if (binary_ != &::google::protobuf::internal::kEmptyString) {
        binary_->clear();
      }
    }
    envs_only_ = false;
    redirect_stdout_ = true;
    redirect_stderr_ = true;
    if (has_slave_name()) {
      if (slave_name_ != &::google::protobuf::internal::kEmptyString) {
        slave_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    max_memory_mb_ = 32768;
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    md5sum_now_ = false;
  }
  args_.Clear();
  envs_.Clear();
  md5sum_files_.Clear();
  expected_md5sums_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddApplicationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_binary;
        break;
      }
      
      // required string binary = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_binary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->binary().data(), this->binary().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }
      
      // repeated string args = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args(0).data(), this->args(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        if (input->ExpectTag(34)) goto parse_envs;
        break;
      }
      
      // repeated string envs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_envs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_envs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->envs(0).data(), this->envs(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_envs;
        if (input->ExpectTag(40)) goto parse_envs_only;
        break;
      }
      
      // optional bool envs_only = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_envs_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &envs_only_)));
          set_has_envs_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_redirect_stdout;
        break;
      }
      
      // optional bool redirect_stdout = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redirect_stdout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &redirect_stdout_)));
          set_has_redirect_stdout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_redirect_stderr;
        break;
      }
      
      // optional bool redirect_stderr = 7 [default = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redirect_stderr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &redirect_stderr_)));
          set_has_redirect_stderr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_slave_name;
        break;
      }
      
      // required string slave_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slave_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slave_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slave_name().data(), this->slave_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_max_memory_mb;
        break;
      }
      
      // optional int32 max_memory_mb = 9 [default = 32768];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_memory_mb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_memory_mb_)));
          set_has_max_memory_mb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_comment;
        break;
      }
      
      // optional string comment = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_md5sum_files;
        break;
      }
      
      // repeated string md5sum_files = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5sum_files:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_md5sum_files()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5sum_files(0).data(), this->md5sum_files(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_md5sum_files;
        if (input->ExpectTag(170)) goto parse_expected_md5sums;
        break;
      }
      
      // repeated string expected_md5sums = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expected_md5sums:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_expected_md5sums()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->expected_md5sums(0).data(), this->expected_md5sums(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_expected_md5sums;
        if (input->ExpectTag(176)) goto parse_md5sum_now;
        break;
      }
      
      // optional bool md5sum_now = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_md5sum_now:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &md5sum_now_)));
          set_has_md5sum_now();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddApplicationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string binary = 2;
  if (has_binary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->binary().data(), this->binary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->binary(), output);
  }
  
  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->args(i).data(), this->args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->args(i), output);
  }
  
  // repeated string envs = 4;
  for (int i = 0; i < this->envs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->envs(i).data(), this->envs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->envs(i), output);
  }
  
  // optional bool envs_only = 5 [default = false];
  if (has_envs_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->envs_only(), output);
  }
  
  // optional bool redirect_stdout = 6 [default = true];
  if (has_redirect_stdout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->redirect_stdout(), output);
  }
  
  // optional bool redirect_stderr = 7 [default = true];
  if (has_redirect_stderr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->redirect_stderr(), output);
  }
  
  // required string slave_name = 8;
  if (has_slave_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slave_name().data(), this->slave_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->slave_name(), output);
  }
  
  // optional int32 max_memory_mb = 9 [default = 32768];
  if (has_max_memory_mb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_memory_mb(), output);
  }
  
  // optional string comment = 10;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->comment(), output);
  }
  
  // repeated string md5sum_files = 20;
  for (int i = 0; i < this->md5sum_files_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->md5sum_files(i).data(), this->md5sum_files(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->md5sum_files(i), output);
  }
  
  // repeated string expected_md5sums = 21;
  for (int i = 0; i < this->expected_md5sums_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->expected_md5sums(i).data(), this->expected_md5sums(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->expected_md5sums(i), output);
  }
  
  // optional bool md5sum_now = 22;
  if (has_md5sum_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->md5sum_now(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddApplicationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string binary = 2;
  if (has_binary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->binary().data(), this->binary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->binary(), target);
  }
  
  // repeated string args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->args(i), target);
  }
  
  // repeated string envs = 4;
  for (int i = 0; i < this->envs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->envs(i).data(), this->envs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->envs(i), target);
  }
  
  // optional bool envs_only = 5 [default = false];
  if (has_envs_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->envs_only(), target);
  }
  
  // optional bool redirect_stdout = 6 [default = true];
  if (has_redirect_stdout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->redirect_stdout(), target);
  }
  
  // optional bool redirect_stderr = 7 [default = true];
  if (has_redirect_stderr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->redirect_stderr(), target);
  }
  
  // required string slave_name = 8;
  if (has_slave_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slave_name().data(), this->slave_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->slave_name(), target);
  }
  
  // optional int32 max_memory_mb = 9 [default = 32768];
  if (has_max_memory_mb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_memory_mb(), target);
  }
  
  // optional string comment = 10;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->comment(), target);
  }
  
  // repeated string md5sum_files = 20;
  for (int i = 0; i < this->md5sum_files_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5sum_files(i).data(), this->md5sum_files(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(20, this->md5sum_files(i), target);
  }
  
  // repeated string expected_md5sums = 21;
  for (int i = 0; i < this->expected_md5sums_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expected_md5sums(i).data(), this->expected_md5sums(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(21, this->expected_md5sums(i), target);
  }
  
  // optional bool md5sum_now = 22;
  if (has_md5sum_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->md5sum_now(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddApplicationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string binary = 2;
    if (has_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->binary());
    }
    
    // optional bool envs_only = 5 [default = false];
    if (has_envs_only()) {
      total_size += 1 + 1;
    }
    
    // optional bool redirect_stdout = 6 [default = true];
    if (has_redirect_stdout()) {
      total_size += 1 + 1;
    }
    
    // optional bool redirect_stderr = 7 [default = true];
    if (has_redirect_stderr()) {
      total_size += 1 + 1;
    }
    
    // required string slave_name = 8;
    if (has_slave_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slave_name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 max_memory_mb = 9 [default = 32768];
    if (has_max_memory_mb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_memory_mb());
    }
    
    // optional string comment = 10;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }
    
    // optional bool md5sum_now = 22;
    if (has_md5sum_now()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated string args = 3;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }
  
  // repeated string envs = 4;
  total_size += 1 * this->envs_size();
  for (int i = 0; i < this->envs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->envs(i));
  }
  
  // repeated string md5sum_files = 20;
  total_size += 2 * this->md5sum_files_size();
  for (int i = 0; i < this->md5sum_files_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->md5sum_files(i));
  }
  
  // repeated string expected_md5sums = 21;
  total_size += 2 * this->expected_md5sums_size();
  for (int i = 0; i < this->expected_md5sums_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->expected_md5sums(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddApplicationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddApplicationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddApplicationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddApplicationRequest::MergeFrom(const AddApplicationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  envs_.MergeFrom(from.envs_);
  md5sum_files_.MergeFrom(from.md5sum_files_);
  expected_md5sums_.MergeFrom(from.expected_md5sums_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_binary()) {
      set_binary(from.binary());
    }
    if (from.has_envs_only()) {
      set_envs_only(from.envs_only());
    }
    if (from.has_redirect_stdout()) {
      set_redirect_stdout(from.redirect_stdout());
    }
    if (from.has_redirect_stderr()) {
      set_redirect_stderr(from.redirect_stderr());
    }
    if (from.has_slave_name()) {
      set_slave_name(from.slave_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_memory_mb()) {
      set_max_memory_mb(from.max_memory_mb());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_md5sum_now()) {
      set_md5sum_now(from.md5sum_now());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddApplicationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddApplicationRequest::CopyFrom(const AddApplicationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddApplicationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000083) != 0x00000083) return false;
  
  return true;
}

void AddApplicationRequest::Swap(AddApplicationRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(binary_, other->binary_);
    args_.Swap(&other->args_);
    envs_.Swap(&other->envs_);
    std::swap(envs_only_, other->envs_only_);
    std::swap(redirect_stdout_, other->redirect_stdout_);
    std::swap(redirect_stderr_, other->redirect_stderr_);
    std::swap(slave_name_, other->slave_name_);
    std::swap(max_memory_mb_, other->max_memory_mb_);
    std::swap(comment_, other->comment_);
    md5sum_files_.Swap(&other->md5sum_files_);
    expected_md5sums_.Swap(&other->expected_md5sums_);
    std::swap(md5sum_now_, other->md5sum_now_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddApplicationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddApplicationRequest_descriptor_;
  metadata.reflection = AddApplicationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddApplicationResponse::kStatusFieldNumber;
const int AddApplicationResponse::kPrevRequestFieldNumber;
const int AddApplicationResponse::kMd5SumsFieldNumber;
#endif  // !_MSC_VER

AddApplicationResponse::AddApplicationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddApplicationResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::cetty::zurg::slave::ApplicationStatus*>(&::cetty::zurg::slave::ApplicationStatus::default_instance());
  prev_request_ = const_cast< ::cetty::zurg::slave::AddApplicationRequest*>(&::cetty::zurg::slave::AddApplicationRequest::default_instance());
}

AddApplicationResponse::AddApplicationResponse(const AddApplicationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddApplicationResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  prev_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddApplicationResponse::~AddApplicationResponse() {
  SharedDtor();
}

void AddApplicationResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
    delete prev_request_;
  }
}

void AddApplicationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddApplicationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddApplicationResponse_descriptor_;
}

const AddApplicationResponse& AddApplicationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

AddApplicationResponse* AddApplicationResponse::default_instance_ = NULL;

AddApplicationResponse* AddApplicationResponse::New() const {
  return new AddApplicationResponse;
}

void AddApplicationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::cetty::zurg::slave::ApplicationStatus::Clear();
    }
    if (has_prev_request()) {
      if (prev_request_ != NULL) prev_request_->::cetty::zurg::slave::AddApplicationRequest::Clear();
    }
  }
  md5sums_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddApplicationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cetty.zurg.slave.ApplicationStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prev_request;
        break;
      }
      
      // optional .cetty.zurg.slave.AddApplicationRequest prev_request = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prev_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prev_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_md5sums;
        break;
      }
      
      // repeated string md5sums = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_md5sums:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_md5sums()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->md5sums(0).data(), this->md5sums(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_md5sums;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddApplicationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cetty.zurg.slave.ApplicationStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  // optional .cetty.zurg.slave.AddApplicationRequest prev_request = 2;
  if (has_prev_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->prev_request(), output);
  }
  
  // repeated string md5sums = 3;
  for (int i = 0; i < this->md5sums_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->md5sums(i).data(), this->md5sums(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->md5sums(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddApplicationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cetty.zurg.slave.ApplicationStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  // optional .cetty.zurg.slave.AddApplicationRequest prev_request = 2;
  if (has_prev_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->prev_request(), target);
  }
  
  // repeated string md5sums = 3;
  for (int i = 0; i < this->md5sums_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->md5sums(i).data(), this->md5sums(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->md5sums(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddApplicationResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cetty.zurg.slave.ApplicationStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
    // optional .cetty.zurg.slave.AddApplicationRequest prev_request = 2;
    if (has_prev_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prev_request());
    }
    
  }
  // repeated string md5sums = 3;
  total_size += 1 * this->md5sums_size();
  for (int i = 0; i < this->md5sums_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->md5sums(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddApplicationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddApplicationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddApplicationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddApplicationResponse::MergeFrom(const AddApplicationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  md5sums_.MergeFrom(from.md5sums_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::cetty::zurg::slave::ApplicationStatus::MergeFrom(from.status());
    }
    if (from.has_prev_request()) {
      mutable_prev_request()->::cetty::zurg::slave::AddApplicationRequest::MergeFrom(from.prev_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddApplicationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddApplicationResponse::CopyFrom(const AddApplicationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddApplicationResponse::IsInitialized() const {
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  if (has_prev_request()) {
    if (!this->prev_request().IsInitialized()) return false;
  }
  return true;
}

void AddApplicationResponse::Swap(AddApplicationResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(prev_request_, other->prev_request_);
    md5sums_.Swap(&other->md5sums_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddApplicationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddApplicationResponse_descriptor_;
  metadata.reflection = AddApplicationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartApplicationsRequest::kNamesFieldNumber;
#endif  // !_MSC_VER

StartApplicationsRequest::StartApplicationsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartApplicationsRequest::InitAsDefaultInstance() {
}

StartApplicationsRequest::StartApplicationsRequest(const StartApplicationsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartApplicationsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartApplicationsRequest::~StartApplicationsRequest() {
  SharedDtor();
}

void StartApplicationsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartApplicationsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartApplicationsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartApplicationsRequest_descriptor_;
}

const StartApplicationsRequest& StartApplicationsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

StartApplicationsRequest* StartApplicationsRequest::default_instance_ = NULL;

StartApplicationsRequest* StartApplicationsRequest::New() const {
  return new StartApplicationsRequest;
}

void StartApplicationsRequest::Clear() {
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartApplicationsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string names = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(0).data(), this->names(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartApplicationsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartApplicationsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->names(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartApplicationsRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated string names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartApplicationsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartApplicationsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartApplicationsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartApplicationsRequest::MergeFrom(const StartApplicationsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartApplicationsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartApplicationsRequest::CopyFrom(const StartApplicationsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartApplicationsRequest::IsInitialized() const {
  
  return true;
}

void StartApplicationsRequest::Swap(StartApplicationsRequest* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartApplicationsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartApplicationsRequest_descriptor_;
  metadata.reflection = StartApplicationsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartApplicationsResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

StartApplicationsResponse::StartApplicationsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartApplicationsResponse::InitAsDefaultInstance() {
}

StartApplicationsResponse::StartApplicationsResponse(const StartApplicationsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartApplicationsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartApplicationsResponse::~StartApplicationsResponse() {
  SharedDtor();
}

void StartApplicationsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartApplicationsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartApplicationsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartApplicationsResponse_descriptor_;
}

const StartApplicationsResponse& StartApplicationsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

StartApplicationsResponse* StartApplicationsResponse::default_instance_ = NULL;

StartApplicationsResponse* StartApplicationsResponse::New() const {
  return new StartApplicationsResponse;
}

void StartApplicationsResponse::Clear() {
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartApplicationsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cetty.zurg.slave.ApplicationStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartApplicationsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cetty.zurg.slave.ApplicationStatus status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartApplicationsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cetty.zurg.slave.ApplicationStatus status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartApplicationsResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .cetty.zurg.slave.ApplicationStatus status = 1;
  total_size += 1 * this->status_size();
  for (int i = 0; i < this->status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartApplicationsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartApplicationsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartApplicationsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartApplicationsResponse::MergeFrom(const StartApplicationsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartApplicationsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartApplicationsResponse::CopyFrom(const StartApplicationsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartApplicationsResponse::IsInitialized() const {
  
  for (int i = 0; i < status_size(); i++) {
    if (!this->status(i).IsInitialized()) return false;
  }
  return true;
}

void StartApplicationsResponse::Swap(StartApplicationsResponse* other) {
  if (other != this) {
    status_.Swap(&other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartApplicationsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartApplicationsResponse_descriptor_;
  metadata.reflection = StartApplicationsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopApplicationRequest::kNamesFieldNumber;
#endif  // !_MSC_VER

StopApplicationRequest::StopApplicationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopApplicationRequest::InitAsDefaultInstance() {
}

StopApplicationRequest::StopApplicationRequest(const StopApplicationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopApplicationRequest::SharedCtor() {
  _cached_size_ = 0;
  names_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopApplicationRequest::~StopApplicationRequest() {
  SharedDtor();
}

void StopApplicationRequest::SharedDtor() {
  if (names_ != &::google::protobuf::internal::kEmptyString) {
    delete names_;
  }
  if (this != default_instance_) {
  }
}

void StopApplicationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopApplicationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopApplicationRequest_descriptor_;
}

const StopApplicationRequest& StopApplicationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

StopApplicationRequest* StopApplicationRequest::default_instance_ = NULL;

StopApplicationRequest* StopApplicationRequest::New() const {
  return new StopApplicationRequest;
}

void StopApplicationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_names()) {
      if (names_ != &::google::protobuf::internal::kEmptyString) {
        names_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopApplicationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string names = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names().data(), this->names().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopApplicationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string names = 1;
  if (has_names()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names().data(), this->names().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopApplicationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string names = 1;
  if (has_names()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names().data(), this->names().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->names(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopApplicationRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string names = 1;
    if (has_names()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->names());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopApplicationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopApplicationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopApplicationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopApplicationRequest::MergeFrom(const StopApplicationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_names()) {
      set_names(from.names());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopApplicationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopApplicationRequest::CopyFrom(const StopApplicationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopApplicationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void StopApplicationRequest::Swap(StopApplicationRequest* other) {
  if (other != this) {
    std::swap(names_, other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopApplicationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopApplicationRequest_descriptor_;
  metadata.reflection = StopApplicationRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopApplicationResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

StopApplicationResponse::StopApplicationResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopApplicationResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::cetty::zurg::slave::ApplicationStatus*>(&::cetty::zurg::slave::ApplicationStatus::default_instance());
}

StopApplicationResponse::StopApplicationResponse(const StopApplicationResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopApplicationResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopApplicationResponse::~StopApplicationResponse() {
  SharedDtor();
}

void StopApplicationResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void StopApplicationResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopApplicationResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopApplicationResponse_descriptor_;
}

const StopApplicationResponse& StopApplicationResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

StopApplicationResponse* StopApplicationResponse::default_instance_ = NULL;

StopApplicationResponse* StopApplicationResponse::New() const {
  return new StopApplicationResponse;
}

void StopApplicationResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::cetty::zurg::slave::ApplicationStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopApplicationResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cetty.zurg.slave.ApplicationStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StopApplicationResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cetty.zurg.slave.ApplicationStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopApplicationResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cetty.zurg.slave.ApplicationStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopApplicationResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cetty.zurg.slave.ApplicationStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopApplicationResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopApplicationResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopApplicationResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopApplicationResponse::MergeFrom(const StopApplicationResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::cetty::zurg::slave::ApplicationStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopApplicationResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopApplicationResponse::CopyFrom(const StopApplicationResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopApplicationResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_status()) {
    if (!this->status().IsInitialized()) return false;
  }
  return true;
}

void StopApplicationResponse::Swap(StopApplicationResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopApplicationResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopApplicationResponse_descriptor_;
  metadata.reflection = StopApplicationResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListApplicationsRequest::kNamesFieldNumber;
#endif  // !_MSC_VER

ListApplicationsRequest::ListApplicationsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListApplicationsRequest::InitAsDefaultInstance() {
}

ListApplicationsRequest::ListApplicationsRequest(const ListApplicationsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListApplicationsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListApplicationsRequest::~ListApplicationsRequest() {
  SharedDtor();
}

void ListApplicationsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListApplicationsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListApplicationsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListApplicationsRequest_descriptor_;
}

const ListApplicationsRequest& ListApplicationsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

ListApplicationsRequest* ListApplicationsRequest::default_instance_ = NULL;

ListApplicationsRequest* ListApplicationsRequest::New() const {
  return new ListApplicationsRequest;
}

void ListApplicationsRequest::Clear() {
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListApplicationsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string names = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->names(0).data(), this->names(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListApplicationsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListApplicationsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->names(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListApplicationsRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated string names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListApplicationsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListApplicationsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListApplicationsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListApplicationsRequest::MergeFrom(const ListApplicationsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListApplicationsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListApplicationsRequest::CopyFrom(const ListApplicationsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListApplicationsRequest::IsInitialized() const {
  
  return true;
}

void ListApplicationsRequest::Swap(ListApplicationsRequest* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListApplicationsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListApplicationsRequest_descriptor_;
  metadata.reflection = ListApplicationsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ListApplicationsResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

ListApplicationsResponse::ListApplicationsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListApplicationsResponse::InitAsDefaultInstance() {
}

ListApplicationsResponse::ListApplicationsResponse(const ListApplicationsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListApplicationsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListApplicationsResponse::~ListApplicationsResponse() {
  SharedDtor();
}

void ListApplicationsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ListApplicationsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListApplicationsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListApplicationsResponse_descriptor_;
}

const ListApplicationsResponse& ListApplicationsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

ListApplicationsResponse* ListApplicationsResponse::default_instance_ = NULL;

ListApplicationsResponse* ListApplicationsResponse::New() const {
  return new ListApplicationsResponse;
}

void ListApplicationsResponse::Clear() {
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListApplicationsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cetty.zurg.slave.ApplicationStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListApplicationsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .cetty.zurg.slave.ApplicationStatus status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListApplicationsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .cetty.zurg.slave.ApplicationStatus status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListApplicationsResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .cetty.zurg.slave.ApplicationStatus status = 1;
  total_size += 1 * this->status_size();
  for (int i = 0; i < this->status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListApplicationsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListApplicationsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListApplicationsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListApplicationsResponse::MergeFrom(const ListApplicationsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListApplicationsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListApplicationsResponse::CopyFrom(const ListApplicationsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListApplicationsResponse::IsInitialized() const {
  
  for (int i = 0; i < status_size(); i++) {
    if (!this->status(i).IsInitialized()) return false;
  }
  return true;
}

void ListApplicationsResponse::Swap(ListApplicationsResponse* other) {
  if (other != this) {
    status_.Swap(&other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListApplicationsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListApplicationsResponse_descriptor_;
  metadata.reflection = ListApplicationsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveApplicationsRequest::kNameFieldNumber;
#endif  // !_MSC_VER

RemoveApplicationsRequest::RemoveApplicationsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveApplicationsRequest::InitAsDefaultInstance() {
}

RemoveApplicationsRequest::RemoveApplicationsRequest(const RemoveApplicationsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveApplicationsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveApplicationsRequest::~RemoveApplicationsRequest() {
  SharedDtor();
}

void RemoveApplicationsRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveApplicationsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveApplicationsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveApplicationsRequest_descriptor_;
}

const RemoveApplicationsRequest& RemoveApplicationsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

RemoveApplicationsRequest* RemoveApplicationsRequest::default_instance_ = NULL;

RemoveApplicationsRequest* RemoveApplicationsRequest::New() const {
  return new RemoveApplicationsRequest;
}

void RemoveApplicationsRequest::Clear() {
  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveApplicationsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name(0).data(), this->name(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoveApplicationsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveApplicationsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string name = 1;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->name(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveApplicationsRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated string name = 1;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveApplicationsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveApplicationsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveApplicationsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveApplicationsRequest::MergeFrom(const RemoveApplicationsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveApplicationsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveApplicationsRequest::CopyFrom(const RemoveApplicationsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveApplicationsRequest::IsInitialized() const {
  
  return true;
}

void RemoveApplicationsRequest::Swap(RemoveApplicationsRequest* other) {
  if (other != this) {
    name_.Swap(&other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveApplicationsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveApplicationsRequest_descriptor_;
  metadata.reflection = RemoveApplicationsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RemoveApplicationsResponse::RemoveApplicationsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemoveApplicationsResponse::InitAsDefaultInstance() {
}

RemoveApplicationsResponse::RemoveApplicationsResponse(const RemoveApplicationsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemoveApplicationsResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveApplicationsResponse::~RemoveApplicationsResponse() {
  SharedDtor();
}

void RemoveApplicationsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveApplicationsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveApplicationsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveApplicationsResponse_descriptor_;
}

const RemoveApplicationsResponse& RemoveApplicationsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();  return *default_instance_;
}

RemoveApplicationsResponse* RemoveApplicationsResponse::default_instance_ = NULL;

RemoveApplicationsResponse* RemoveApplicationsResponse::New() const {
  return new RemoveApplicationsResponse;
}

void RemoveApplicationsResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveApplicationsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RemoveApplicationsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemoveApplicationsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemoveApplicationsResponse::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveApplicationsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveApplicationsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveApplicationsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveApplicationsResponse::MergeFrom(const RemoveApplicationsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveApplicationsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveApplicationsResponse::CopyFrom(const RemoveApplicationsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveApplicationsResponse::IsInitialized() const {
  
  return true;
}

void RemoveApplicationsResponse::Swap(RemoveApplicationsResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveApplicationsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveApplicationsResponse_descriptor_;
  metadata.reflection = RemoveApplicationsResponse_reflection_;
  return metadata;
}


// ===================================================================

SlaveService::~SlaveService() {}

const ::google::protobuf::ServiceDescriptor* SlaveService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlaveService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* SlaveService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlaveService_descriptor_;
}

void SlaveService::getHardware(const ConstGetHardwareRequestPtr& request,
                         const GetHardwareResponsePtr& response,
                         const DoneCallback& done) {
  assert(0);
}

void SlaveService::getFileContent(const ConstGetFileContentRequestPtr& request,
                         const GetFileContentResponsePtr& response,
                         const DoneCallback& done) {
  assert(0);
}

void SlaveService::getFileChecksum(const ConstGetFileChecksumRequestPtr& request,
                         const GetFileChecksumResponsePtr& response,
                         const DoneCallback& done) {
  assert(0);
}

void SlaveService::listProcesses(const ConstListProcessesRequestPtr& request,
                         const ListProcessesResponsePtr& response,
                         const DoneCallback& done) {
  assert(0);
}

void SlaveService::runCommand(const ConstRunCommandRequestPtr& request,
                         const RunCommandResponsePtr& response,
                         const DoneCallback& done) {
  assert(0);
}

void SlaveService::runScript(const ConstRunScriptRequestPtr& request,
                         const RunCommandResponsePtr& response,
                         const DoneCallback& done) {
  assert(0);
}

void SlaveService::addApplication(const ConstAddApplicationRequestPtr& request,
                         const AddApplicationResponsePtr& response,
                         const DoneCallback& done) {
  assert(0);
}

void SlaveService::startApplications(const ConstStartApplicationsRequestPtr& request,
                         const StartApplicationsResponsePtr& response,
                         const DoneCallback& done) {
  assert(0);
}

void SlaveService::stopApplication(const ConstStopApplicationRequestPtr& request,
                         const StopApplicationResponsePtr& response,
                         const DoneCallback& done) {
  assert(0);
}

void SlaveService::listApplications(const ConstListApplicationsRequestPtr& request,
                         const ListApplicationsResponsePtr& response,
                         const DoneCallback& done) {
  assert(0);
}

void SlaveService::removeApplications(const ConstRemoveApplicationsRequestPtr& request,
                         const RemoveApplicationsResponsePtr& response,
                         const DoneCallback& done) {
  assert(0);
}

void SlaveService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             const ::cetty::protobuf::service::ConstMessagePtr& request,
                             const ::cetty::protobuf::service::MessagePtr& response,
                             const DoneCallback& done) {
  GOOGLE_DCHECK_EQ(method->service(), SlaveService_descriptor_);
  switch(method->index()) {
    case 0:
      getHardware(static_cast< ConstGetHardwareRequestPtr>(request),
             static_cast< GetHardwareResponsePtr>(response),
             done);
      break;
    case 1:
      getFileContent(static_cast< ConstGetFileContentRequestPtr>(request),
             static_cast< GetFileContentResponsePtr>(response),
             done);
      break;
    case 2:
      getFileChecksum(static_cast< ConstGetFileChecksumRequestPtr>(request),
             static_cast< GetFileChecksumResponsePtr>(response),
             done);
      break;
    case 3:
      listProcesses(static_cast< ConstListProcessesRequestPtr>(request),
             static_cast< ListProcessesResponsePtr>(response),
             done);
      break;
    case 4:
      runCommand(static_cast< ConstRunCommandRequestPtr>(request),
             static_cast< RunCommandResponsePtr>(response),
             done);
      break;
    case 5:
      runScript(static_cast< ConstRunScriptRequestPtr>(request),
             static_cast< RunCommandResponsePtr>(response),
             done);
      break;
    case 6:
      addApplication(static_cast< ConstAddApplicationRequestPtr>(request),
             static_cast< AddApplicationResponsePtr>(response),
             done);
      break;
    case 7:
      startApplications(static_cast< ConstStartApplicationsRequestPtr>(request),
             static_cast< StartApplicationsResponsePtr>(response),
             done);
      break;
    case 8:
      stopApplication(static_cast< ConstStopApplicationRequestPtr>(request),
             static_cast< StopApplicationResponsePtr>(response),
             done);
      break;
    case 9:
      listApplications(static_cast< ConstListApplicationsRequestPtr>(request),
             static_cast< ListApplicationsResponsePtr>(response),
             done);
      break;
    case 10:
      removeApplications(static_cast< ConstRemoveApplicationsRequestPtr>(request),
             static_cast< RemoveApplicationsResponsePtr>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message* SlaveService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return &::cetty::zurg::slave::GetHardwareRequest::default_instance();
    case 1:
      return &::cetty::zurg::slave::GetFileContentRequest::default_instance();
    case 2:
      return &::cetty::zurg::slave::GetFileChecksumRequest::default_instance();
    case 3:
      return &::cetty::zurg::slave::ListProcessesRequest::default_instance();
    case 4:
      return &::cetty::zurg::slave::RunCommandRequest::default_instance();
    case 5:
      return &::cetty::zurg::slave::RunScriptRequest::default_instance();
    case 6:
      return &::cetty::zurg::slave::AddApplicationRequest::default_instance();
    case 7:
      return &::cetty::zurg::slave::StartApplicationsRequest::default_instance();
    case 8:
      return &::cetty::zurg::slave::StopApplicationRequest::default_instance();
    case 9:
      return &::cetty::zurg::slave::ListApplicationsRequest::default_instance();
    case 10:
      return &::cetty::zurg::slave::RemoveApplicationsRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return NULL;
  }
}

const ::google::protobuf::Message* SlaveService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return &::cetty::zurg::slave::GetHardwareResponse::default_instance();
    case 1:
      return &::cetty::zurg::slave::GetFileContentResponse::default_instance();
    case 2:
      return &::cetty::zurg::slave::GetFileChecksumResponse::default_instance();
    case 3:
      return &::cetty::zurg::slave::ListProcessesResponse::default_instance();
    case 4:
      return &::cetty::zurg::slave::RunCommandResponse::default_instance();
    case 5:
      return &::cetty::zurg::slave::RunCommandResponse::default_instance();
    case 6:
      return &::cetty::zurg::slave::AddApplicationResponse::default_instance();
    case 7:
      return &::cetty::zurg::slave::StartApplicationsResponse::default_instance();
    case 8:
      return &::cetty::zurg::slave::StopApplicationResponse::default_instance();
    case 9:
      return &::cetty::zurg::slave::ListApplicationsResponse::default_instance();
    case 10:
      return &::cetty::zurg::slave::RemoveApplicationsResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return NULL;
  }
}

SlaveService_Stub::SlaveService_Stub(const cetty::service::ClientServicePtr& service)
  : channel_(service), owns_channel_(false) {
    static int init = 0;
    if (!init) {
        ::cetty::protobuf::service::ProtobufServiceRegister& serviceRegister =
            ::cetty::protobuf::service::ProtobufServiceRegister::instance();

       serviceRegister.registerResponsePrototype("cetty.zurg.slave.SlaveService",
                                                 "getHardware",
                                                 &GetHardwareResponse::default_instance());

       serviceRegister.registerResponsePrototype("cetty.zurg.slave.SlaveService",
                                                 "getFileContent",
                                                 &GetFileContentResponse::default_instance());

       serviceRegister.registerResponsePrototype("cetty.zurg.slave.SlaveService",
                                                 "getFileChecksum",
                                                 &GetFileChecksumResponse::default_instance());

       serviceRegister.registerResponsePrototype("cetty.zurg.slave.SlaveService",
                                                 "listProcesses",
                                                 &ListProcessesResponse::default_instance());

       serviceRegister.registerResponsePrototype("cetty.zurg.slave.SlaveService",
                                                 "runCommand",
                                                 &RunCommandResponse::default_instance());

       serviceRegister.registerResponsePrototype("cetty.zurg.slave.SlaveService",
                                                 "runScript",
                                                 &RunCommandResponse::default_instance());

       serviceRegister.registerResponsePrototype("cetty.zurg.slave.SlaveService",
                                                 "addApplication",
                                                 &AddApplicationResponse::default_instance());

       serviceRegister.registerResponsePrototype("cetty.zurg.slave.SlaveService",
                                                 "startApplications",
                                                 &StartApplicationsResponse::default_instance());

       serviceRegister.registerResponsePrototype("cetty.zurg.slave.SlaveService",
                                                 "stopApplication",
                                                 &StopApplicationResponse::default_instance());

       serviceRegister.registerResponsePrototype("cetty.zurg.slave.SlaveService",
                                                 "listApplications",
                                                 &ListApplicationsResponse::default_instance());

       serviceRegister.registerResponsePrototype("cetty.zurg.slave.SlaveService",
                                                 "removeApplications",
                                                 &RemoveApplicationsResponse::default_instance());

        init = 1;
    }
}
SlaveService_Stub::~SlaveService_Stub() {
}

void SlaveService_Stub::getHardware(const ConstGetHardwareRequestPtr& request,
                              const getHardwareServiceFuturePtr& future) {
  channel_.CallMethod<ConstGetHardwareRequestPtr, GetHardwareResponsePtr>(descriptor()->method(0),
                                                              request,
                                                              future);
}
void SlaveService_Stub::getFileContent(const ConstGetFileContentRequestPtr& request,
                              const getFileContentServiceFuturePtr& future) {
  channel_.CallMethod<ConstGetFileContentRequestPtr, GetFileContentResponsePtr>(descriptor()->method(1),
                                                              request,
                                                              future);
}
void SlaveService_Stub::getFileChecksum(const ConstGetFileChecksumRequestPtr& request,
                              const getFileChecksumServiceFuturePtr& future) {
  channel_.CallMethod<ConstGetFileChecksumRequestPtr, GetFileChecksumResponsePtr>(descriptor()->method(2),
                                                              request,
                                                              future);
}
void SlaveService_Stub::listProcesses(const ConstListProcessesRequestPtr& request,
                              const listProcessesServiceFuturePtr& future) {
  channel_.CallMethod<ConstListProcessesRequestPtr, ListProcessesResponsePtr>(descriptor()->method(3),
                                                              request,
                                                              future);
}
void SlaveService_Stub::runCommand(const ConstRunCommandRequestPtr& request,
                              const runCommandServiceFuturePtr& future) {
  channel_.CallMethod<ConstRunCommandRequestPtr, RunCommandResponsePtr>(descriptor()->method(4),
                                                              request,
                                                              future);
}
void SlaveService_Stub::runScript(const ConstRunScriptRequestPtr& request,
                              const runScriptServiceFuturePtr& future) {
  channel_.CallMethod<ConstRunScriptRequestPtr, RunCommandResponsePtr>(descriptor()->method(5),
                                                              request,
                                                              future);
}
void SlaveService_Stub::addApplication(const ConstAddApplicationRequestPtr& request,
                              const addApplicationServiceFuturePtr& future) {
  channel_.CallMethod<ConstAddApplicationRequestPtr, AddApplicationResponsePtr>(descriptor()->method(6),
                                                              request,
                                                              future);
}
void SlaveService_Stub::startApplications(const ConstStartApplicationsRequestPtr& request,
                              const startApplicationsServiceFuturePtr& future) {
  channel_.CallMethod<ConstStartApplicationsRequestPtr, StartApplicationsResponsePtr>(descriptor()->method(7),
                                                              request,
                                                              future);
}
void SlaveService_Stub::stopApplication(const ConstStopApplicationRequestPtr& request,
                              const stopApplicationServiceFuturePtr& future) {
  channel_.CallMethod<ConstStopApplicationRequestPtr, StopApplicationResponsePtr>(descriptor()->method(8),
                                                              request,
                                                              future);
}
void SlaveService_Stub::listApplications(const ConstListApplicationsRequestPtr& request,
                              const listApplicationsServiceFuturePtr& future) {
  channel_.CallMethod<ConstListApplicationsRequestPtr, ListApplicationsResponsePtr>(descriptor()->method(9),
                                                              request,
                                                              future);
}
void SlaveService_Stub::removeApplications(const ConstRemoveApplicationsRequestPtr& request,
                              const removeApplicationsServiceFuturePtr& future) {
  channel_.CallMethod<ConstRemoveApplicationsRequestPtr, RemoveApplicationsResponsePtr>(descriptor()->method(10),
                                                              request,
                                                              future);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace slave
}  // namespace zurg
}  // namespace cetty

// @@protoc_insertion_point(global_scope)


