// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cetty/zurg/master/master.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <cetty/protobuf/service/ProtobufServiceRegister.h>
// @@protoc_insertion_point(includes)

namespace cetty {
namespace zurg {
namespace master {

namespace {

const ::google::protobuf::Descriptor* SlaveHeartbeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlaveHeartbeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlaveHeartbeat_Uname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlaveHeartbeat_Uname_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* MasterService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cetty_2fzurg_2fmaster_2fmaster_2eproto() {
  protobuf_AddDesc_cetty_2fzurg_2fmaster_2fmaster_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cetty/zurg/master/master.proto");
  GOOGLE_CHECK(file != NULL);
  SlaveHeartbeat_descriptor_ = file->message_type(0);
  static const int SlaveHeartbeat_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, slave_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, send_time_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, host_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, listen_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, slave_pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, start_time_us_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, slave_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, env_vars_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, cpuinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, etc_mtab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, sysctl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, meminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, proc_stat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, loadavg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, diskstats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, net_dev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, net_tcp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, disk_usage_),
  };
  SlaveHeartbeat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlaveHeartbeat_descriptor_,
      SlaveHeartbeat::default_instance_,
      SlaveHeartbeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlaveHeartbeat));
  SlaveHeartbeat_Uname_descriptor_ = SlaveHeartbeat_descriptor_->nested_type(0);
  static const int SlaveHeartbeat_Uname_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat_Uname, sys_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat_Uname, node_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat_Uname, release_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat_Uname, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat_Uname, machine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat_Uname, domain_name_),
  };
  SlaveHeartbeat_Uname_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlaveHeartbeat_Uname_descriptor_,
      SlaveHeartbeat_Uname::default_instance_,
      SlaveHeartbeat_Uname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat_Uname, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlaveHeartbeat_Uname, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlaveHeartbeat_Uname));
  MasterService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cetty_2fzurg_2fmaster_2fmaster_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlaveHeartbeat_descriptor_, &SlaveHeartbeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlaveHeartbeat_Uname_descriptor_, &SlaveHeartbeat_Uname::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cetty_2fzurg_2fmaster_2fmaster_2eproto() {
  delete SlaveHeartbeat::default_instance_;
  delete SlaveHeartbeat_reflection_;
  delete SlaveHeartbeat_Uname::default_instance_;
  delete SlaveHeartbeat_Uname_reflection_;
}

void protobuf_AddDesc_cetty_2fzurg_2fmaster_2fmaster_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cetty::protobuf::service::protobuf_AddDesc_cetty_2fprotobuf_2fservice_2fservice_2eproto();
  ::cetty::zurg::slave::protobuf_AddDesc_cetty_2fzurg_2fslave_2fslave_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036cetty/zurg/master/master.proto\022\021cetty."
    "zurg.master\032$cetty/protobuf/service/serv"
    "ice.proto\032\034cetty/zurg/slave/slave.proto\""
    "\302\004\n\016SlaveHeartbeat\022\022\n\nslave_name\030\001 \002(\t\022\024"
    "\n\014send_time_us\030\002 \002(\003\022\021\n\thost_name\030\024 \001(\t\022"
    "\023\n\013listen_port\030\025 \001(\005\022\021\n\tslave_pid\030\026 \001(\005\022"
    "\025\n\rstart_time_us\030\027 \001(\003\022\025\n\rslave_version\030"
    "\030 \001(\t\022\020\n\010env_vars\030\031 \003(\t\022\017\n\007cpuinfo\030\036 \001(\t"
    "\022\017\n\007version\030\037 \001(\t\022\020\n\010etc_mtab\030  \001(\t\022\016\n\006s"
    "ysctl\030! \001(\t\0226\n\005uname\030\" \001(\0132\'.cetty.zurg."
    "master.SlaveHeartbeat.Uname\022\017\n\007meminfo\030("
    " \001(\t\022\021\n\tproc_stat\030) \001(\t\022\017\n\007loadavg\030* \001(\t"
    "\022\021\n\tdiskstats\030+ \001(\t\022\017\n\007net_dev\030, \001(\t\022\017\n\007"
    "net_tcp\030- \001(\t\022/\n\ndisk_usage\0302 \003(\0132\033.cett"
    "y.zurg.slave.DiskUsage\032t\n\005Uname\022\020\n\010sys_n"
    "ame\030\001 \002(\t\022\021\n\tnode_name\030\002 \002(\t\022\017\n\007release\030"
    "\003 \002(\t\022\017\n\007version\030\004 \002(\t\022\017\n\007machine\030\005 \002(\t\022"
    "\023\n\013domain_name\030\006 \002(\t2\304\001\n\rMasterService\022W"
    "\n\016slaveHeartbeat\022!.cetty.zurg.master.Sla"
    "veHeartbeat\032\035.cetty.protobuf.service.Emp"
    "ty\"\003\300E\001\022Z\n\017appStatusChange\022#.cetty.zurg."
    "slave.ApplicationStatus\032\035.cetty.protobuf"
    ".service.Empty\"\003\300E\001B)\n\021cetty.zurg.master"
    "B\013MasterProto\200\001\001\210\001\001\220\001\001", 942);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cetty/zurg/master/master.proto", &protobuf_RegisterTypes);
  SlaveHeartbeat::default_instance_ = new SlaveHeartbeat();
  SlaveHeartbeat_Uname::default_instance_ = new SlaveHeartbeat_Uname();
  SlaveHeartbeat::default_instance_->InitAsDefaultInstance();
  SlaveHeartbeat_Uname::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cetty_2fzurg_2fmaster_2fmaster_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cetty_2fzurg_2fmaster_2fmaster_2eproto {
  StaticDescriptorInitializer_cetty_2fzurg_2fmaster_2fmaster_2eproto() {
    protobuf_AddDesc_cetty_2fzurg_2fmaster_2fmaster_2eproto();
  }
} static_descriptor_initializer_cetty_2fzurg_2fmaster_2fmaster_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SlaveHeartbeat_Uname::kSysNameFieldNumber;
const int SlaveHeartbeat_Uname::kNodeNameFieldNumber;
const int SlaveHeartbeat_Uname::kReleaseFieldNumber;
const int SlaveHeartbeat_Uname::kVersionFieldNumber;
const int SlaveHeartbeat_Uname::kMachineFieldNumber;
const int SlaveHeartbeat_Uname::kDomainNameFieldNumber;
#endif  // !_MSC_VER

SlaveHeartbeat_Uname::SlaveHeartbeat_Uname()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlaveHeartbeat_Uname::InitAsDefaultInstance() {
}

SlaveHeartbeat_Uname::SlaveHeartbeat_Uname(const SlaveHeartbeat_Uname& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlaveHeartbeat_Uname::SharedCtor() {
  _cached_size_ = 0;
  sys_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  release_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machine_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  domain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlaveHeartbeat_Uname::~SlaveHeartbeat_Uname() {
  SharedDtor();
}

void SlaveHeartbeat_Uname::SharedDtor() {
  if (sys_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sys_name_;
  }
  if (node_name_ != &::google::protobuf::internal::kEmptyString) {
    delete node_name_;
  }
  if (release_ != &::google::protobuf::internal::kEmptyString) {
    delete release_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (machine_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_;
  }
  if (domain_name_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_name_;
  }
  if (this != default_instance_) {
  }
}

void SlaveHeartbeat_Uname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlaveHeartbeat_Uname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlaveHeartbeat_Uname_descriptor_;
}

const SlaveHeartbeat_Uname& SlaveHeartbeat_Uname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fmaster_2fmaster_2eproto();  return *default_instance_;
}

SlaveHeartbeat_Uname* SlaveHeartbeat_Uname::default_instance_ = NULL;

SlaveHeartbeat_Uname* SlaveHeartbeat_Uname::New() const {
  return new SlaveHeartbeat_Uname;
}

void SlaveHeartbeat_Uname::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sys_name()) {
      if (sys_name_ != &::google::protobuf::internal::kEmptyString) {
        sys_name_->clear();
      }
    }
    if (has_node_name()) {
      if (node_name_ != &::google::protobuf::internal::kEmptyString) {
        node_name_->clear();
      }
    }
    if (has_release()) {
      if (release_ != &::google::protobuf::internal::kEmptyString) {
        release_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_machine()) {
      if (machine_ != &::google::protobuf::internal::kEmptyString) {
        machine_->clear();
      }
    }
    if (has_domain_name()) {
      if (domain_name_ != &::google::protobuf::internal::kEmptyString) {
        domain_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlaveHeartbeat_Uname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sys_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sys_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sys_name().data(), this->sys_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node_name;
        break;
      }
      
      // required string node_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_name().data(), this->node_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_release;
        break;
      }
      
      // required string release = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_release:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_release()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->release().data(), this->release().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }
      
      // required string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_machine;
        break;
      }
      
      // required string machine = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine().data(), this->machine().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_domain_name;
        break;
      }
      
      // required string domain_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain_name().data(), this->domain_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlaveHeartbeat_Uname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sys_name = 1;
  if (has_sys_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sys_name().data(), this->sys_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sys_name(), output);
  }
  
  // required string node_name = 2;
  if (has_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->node_name(), output);
  }
  
  // required string release = 3;
  if (has_release()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->release().data(), this->release().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->release(), output);
  }
  
  // required string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }
  
  // required string machine = 5;
  if (has_machine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine().data(), this->machine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->machine(), output);
  }
  
  // required string domain_name = 6;
  if (has_domain_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain_name().data(), this->domain_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->domain_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlaveHeartbeat_Uname::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sys_name = 1;
  if (has_sys_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sys_name().data(), this->sys_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sys_name(), target);
  }
  
  // required string node_name = 2;
  if (has_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node_name(), target);
  }
  
  // required string release = 3;
  if (has_release()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->release().data(), this->release().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->release(), target);
  }
  
  // required string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->version(), target);
  }
  
  // required string machine = 5;
  if (has_machine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine().data(), this->machine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->machine(), target);
  }
  
  // required string domain_name = 6;
  if (has_domain_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain_name().data(), this->domain_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->domain_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlaveHeartbeat_Uname::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sys_name = 1;
    if (has_sys_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sys_name());
    }
    
    // required string node_name = 2;
    if (has_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_name());
    }
    
    // required string release = 3;
    if (has_release()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->release());
    }
    
    // required string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // required string machine = 5;
    if (has_machine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine());
    }
    
    // required string domain_name = 6;
    if (has_domain_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlaveHeartbeat_Uname::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlaveHeartbeat_Uname* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlaveHeartbeat_Uname*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlaveHeartbeat_Uname::MergeFrom(const SlaveHeartbeat_Uname& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sys_name()) {
      set_sys_name(from.sys_name());
    }
    if (from.has_node_name()) {
      set_node_name(from.node_name());
    }
    if (from.has_release()) {
      set_release(from.release());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_machine()) {
      set_machine(from.machine());
    }
    if (from.has_domain_name()) {
      set_domain_name(from.domain_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlaveHeartbeat_Uname::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlaveHeartbeat_Uname::CopyFrom(const SlaveHeartbeat_Uname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlaveHeartbeat_Uname::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void SlaveHeartbeat_Uname::Swap(SlaveHeartbeat_Uname* other) {
  if (other != this) {
    std::swap(sys_name_, other->sys_name_);
    std::swap(node_name_, other->node_name_);
    std::swap(release_, other->release_);
    std::swap(version_, other->version_);
    std::swap(machine_, other->machine_);
    std::swap(domain_name_, other->domain_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlaveHeartbeat_Uname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlaveHeartbeat_Uname_descriptor_;
  metadata.reflection = SlaveHeartbeat_Uname_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int SlaveHeartbeat::kSlaveNameFieldNumber;
const int SlaveHeartbeat::kSendTimeUsFieldNumber;
const int SlaveHeartbeat::kHostNameFieldNumber;
const int SlaveHeartbeat::kListenPortFieldNumber;
const int SlaveHeartbeat::kSlavePidFieldNumber;
const int SlaveHeartbeat::kStartTimeUsFieldNumber;
const int SlaveHeartbeat::kSlaveVersionFieldNumber;
const int SlaveHeartbeat::kEnvVarsFieldNumber;
const int SlaveHeartbeat::kCpuinfoFieldNumber;
const int SlaveHeartbeat::kVersionFieldNumber;
const int SlaveHeartbeat::kEtcMtabFieldNumber;
const int SlaveHeartbeat::kSysctlFieldNumber;
const int SlaveHeartbeat::kUnameFieldNumber;
const int SlaveHeartbeat::kMeminfoFieldNumber;
const int SlaveHeartbeat::kProcStatFieldNumber;
const int SlaveHeartbeat::kLoadavgFieldNumber;
const int SlaveHeartbeat::kDiskstatsFieldNumber;
const int SlaveHeartbeat::kNetDevFieldNumber;
const int SlaveHeartbeat::kNetTcpFieldNumber;
const int SlaveHeartbeat::kDiskUsageFieldNumber;
#endif  // !_MSC_VER

SlaveHeartbeat::SlaveHeartbeat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlaveHeartbeat::InitAsDefaultInstance() {
  uname_ = const_cast< ::cetty::zurg::master::SlaveHeartbeat_Uname*>(&::cetty::zurg::master::SlaveHeartbeat_Uname::default_instance());
}

SlaveHeartbeat::SlaveHeartbeat(const SlaveHeartbeat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlaveHeartbeat::SharedCtor() {
  _cached_size_ = 0;
  slave_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  send_time_us_ = GOOGLE_LONGLONG(0);
  host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  listen_port_ = 0;
  slave_pid_ = 0;
  start_time_us_ = GOOGLE_LONGLONG(0);
  slave_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cpuinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  etc_mtab_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sysctl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uname_ = NULL;
  meminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proc_stat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loadavg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  diskstats_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  net_dev_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  net_tcp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlaveHeartbeat::~SlaveHeartbeat() {
  SharedDtor();
}

void SlaveHeartbeat::SharedDtor() {
  if (slave_name_ != &::google::protobuf::internal::kEmptyString) {
    delete slave_name_;
  }
  if (host_name_ != &::google::protobuf::internal::kEmptyString) {
    delete host_name_;
  }
  if (slave_version_ != &::google::protobuf::internal::kEmptyString) {
    delete slave_version_;
  }
  if (cpuinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete cpuinfo_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (etc_mtab_ != &::google::protobuf::internal::kEmptyString) {
    delete etc_mtab_;
  }
  if (sysctl_ != &::google::protobuf::internal::kEmptyString) {
    delete sysctl_;
  }
  if (meminfo_ != &::google::protobuf::internal::kEmptyString) {
    delete meminfo_;
  }
  if (proc_stat_ != &::google::protobuf::internal::kEmptyString) {
    delete proc_stat_;
  }
  if (loadavg_ != &::google::protobuf::internal::kEmptyString) {
    delete loadavg_;
  }
  if (diskstats_ != &::google::protobuf::internal::kEmptyString) {
    delete diskstats_;
  }
  if (net_dev_ != &::google::protobuf::internal::kEmptyString) {
    delete net_dev_;
  }
  if (net_tcp_ != &::google::protobuf::internal::kEmptyString) {
    delete net_tcp_;
  }
  if (this != default_instance_) {
    delete uname_;
  }
}

void SlaveHeartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlaveHeartbeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlaveHeartbeat_descriptor_;
}

const SlaveHeartbeat& SlaveHeartbeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fzurg_2fmaster_2fmaster_2eproto();  return *default_instance_;
}

SlaveHeartbeat* SlaveHeartbeat::default_instance_ = NULL;

SlaveHeartbeat* SlaveHeartbeat::New() const {
  return new SlaveHeartbeat;
}

void SlaveHeartbeat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_slave_name()) {
      if (slave_name_ != &::google::protobuf::internal::kEmptyString) {
        slave_name_->clear();
      }
    }
    send_time_us_ = GOOGLE_LONGLONG(0);
    if (has_host_name()) {
      if (host_name_ != &::google::protobuf::internal::kEmptyString) {
        host_name_->clear();
      }
    }
    listen_port_ = 0;
    slave_pid_ = 0;
    start_time_us_ = GOOGLE_LONGLONG(0);
    if (has_slave_version()) {
      if (slave_version_ != &::google::protobuf::internal::kEmptyString) {
        slave_version_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_cpuinfo()) {
      if (cpuinfo_ != &::google::protobuf::internal::kEmptyString) {
        cpuinfo_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_etc_mtab()) {
      if (etc_mtab_ != &::google::protobuf::internal::kEmptyString) {
        etc_mtab_->clear();
      }
    }
    if (has_sysctl()) {
      if (sysctl_ != &::google::protobuf::internal::kEmptyString) {
        sysctl_->clear();
      }
    }
    if (has_uname()) {
      if (uname_ != NULL) uname_->::cetty::zurg::master::SlaveHeartbeat_Uname::Clear();
    }
    if (has_meminfo()) {
      if (meminfo_ != &::google::protobuf::internal::kEmptyString) {
        meminfo_->clear();
      }
    }
    if (has_proc_stat()) {
      if (proc_stat_ != &::google::protobuf::internal::kEmptyString) {
        proc_stat_->clear();
      }
    }
    if (has_loadavg()) {
      if (loadavg_ != &::google::protobuf::internal::kEmptyString) {
        loadavg_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_diskstats()) {
      if (diskstats_ != &::google::protobuf::internal::kEmptyString) {
        diskstats_->clear();
      }
    }
    if (has_net_dev()) {
      if (net_dev_ != &::google::protobuf::internal::kEmptyString) {
        net_dev_->clear();
      }
    }
    if (has_net_tcp()) {
      if (net_tcp_ != &::google::protobuf::internal::kEmptyString) {
        net_tcp_->clear();
      }
    }
  }
  env_vars_.Clear();
  disk_usage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlaveHeartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string slave_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slave_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slave_name().data(), this->slave_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_send_time_us;
        break;
      }
      
      // required int64 send_time_us = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_time_us_)));
          set_has_send_time_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_host_name;
        break;
      }
      
      // optional string host_name = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_listen_port;
        break;
      }
      
      // optional int32 listen_port = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listen_port_)));
          set_has_listen_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_slave_pid;
        break;
      }
      
      // optional int32 slave_pid = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slave_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slave_pid_)));
          set_has_slave_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_start_time_us;
        break;
      }
      
      // optional int64 start_time_us = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time_us:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_us_)));
          set_has_start_time_us();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_slave_version;
        break;
      }
      
      // optional string slave_version = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slave_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slave_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slave_version().data(), this->slave_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_env_vars;
        break;
      }
      
      // repeated string env_vars = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_env_vars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_env_vars()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->env_vars(0).data(), this->env_vars(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_env_vars;
        if (input->ExpectTag(242)) goto parse_cpuinfo;
        break;
      }
      
      // optional string cpuinfo = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cpuinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpuinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cpuinfo().data(), this->cpuinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_version;
        break;
      }
      
      // optional string version = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_etc_mtab;
        break;
      }
      
      // optional string etc_mtab = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_etc_mtab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_etc_mtab()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->etc_mtab().data(), this->etc_mtab().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_sysctl;
        break;
      }
      
      // optional string sysctl = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sysctl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sysctl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sysctl().data(), this->sysctl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_uname;
        break;
      }
      
      // optional .cetty.zurg.master.SlaveHeartbeat.Uname uname = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_meminfo;
        break;
      }
      
      // optional string meminfo = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meminfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meminfo().data(), this->meminfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_proc_stat;
        break;
      }
      
      // optional string proc_stat = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_stat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proc_stat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->proc_stat().data(), this->proc_stat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_loadavg;
        break;
      }
      
      // optional string loadavg = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loadavg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loadavg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loadavg().data(), this->loadavg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_diskstats;
        break;
      }
      
      // optional string diskstats = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diskstats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_diskstats()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->diskstats().data(), this->diskstats().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_net_dev;
        break;
      }
      
      // optional string net_dev = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net_dev:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net_dev()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->net_dev().data(), this->net_dev().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_net_tcp;
        break;
      }
      
      // optional string net_tcp = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_net_tcp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net_tcp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->net_tcp().data(), this->net_tcp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_disk_usage;
        break;
      }
      
      // repeated .cetty.zurg.slave.DiskUsage disk_usage = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_usage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_disk_usage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_disk_usage;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlaveHeartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string slave_name = 1;
  if (has_slave_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slave_name().data(), this->slave_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->slave_name(), output);
  }
  
  // required int64 send_time_us = 2;
  if (has_send_time_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->send_time_us(), output);
  }
  
  // optional string host_name = 20;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->host_name(), output);
  }
  
  // optional int32 listen_port = 21;
  if (has_listen_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->listen_port(), output);
  }
  
  // optional int32 slave_pid = 22;
  if (has_slave_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->slave_pid(), output);
  }
  
  // optional int64 start_time_us = 23;
  if (has_start_time_us()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->start_time_us(), output);
  }
  
  // optional string slave_version = 24;
  if (has_slave_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slave_version().data(), this->slave_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->slave_version(), output);
  }
  
  // repeated string env_vars = 25;
  for (int i = 0; i < this->env_vars_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->env_vars(i).data(), this->env_vars(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->env_vars(i), output);
  }
  
  // optional string cpuinfo = 30;
  if (has_cpuinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpuinfo().data(), this->cpuinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->cpuinfo(), output);
  }
  
  // optional string version = 31;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->version(), output);
  }
  
  // optional string etc_mtab = 32;
  if (has_etc_mtab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->etc_mtab().data(), this->etc_mtab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->etc_mtab(), output);
  }
  
  // optional string sysctl = 33;
  if (has_sysctl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sysctl().data(), this->sysctl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->sysctl(), output);
  }
  
  // optional .cetty.zurg.master.SlaveHeartbeat.Uname uname = 34;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->uname(), output);
  }
  
  // optional string meminfo = 40;
  if (has_meminfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meminfo().data(), this->meminfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->meminfo(), output);
  }
  
  // optional string proc_stat = 41;
  if (has_proc_stat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_stat().data(), this->proc_stat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->proc_stat(), output);
  }
  
  // optional string loadavg = 42;
  if (has_loadavg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loadavg().data(), this->loadavg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      42, this->loadavg(), output);
  }
  
  // optional string diskstats = 43;
  if (has_diskstats()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diskstats().data(), this->diskstats().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      43, this->diskstats(), output);
  }
  
  // optional string net_dev = 44;
  if (has_net_dev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->net_dev().data(), this->net_dev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      44, this->net_dev(), output);
  }
  
  // optional string net_tcp = 45;
  if (has_net_tcp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->net_tcp().data(), this->net_tcp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      45, this->net_tcp(), output);
  }
  
  // repeated .cetty.zurg.slave.DiskUsage disk_usage = 50;
  for (int i = 0; i < this->disk_usage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->disk_usage(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlaveHeartbeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string slave_name = 1;
  if (has_slave_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slave_name().data(), this->slave_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->slave_name(), target);
  }
  
  // required int64 send_time_us = 2;
  if (has_send_time_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->send_time_us(), target);
  }
  
  // optional string host_name = 20;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->host_name(), target);
  }
  
  // optional int32 listen_port = 21;
  if (has_listen_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->listen_port(), target);
  }
  
  // optional int32 slave_pid = 22;
  if (has_slave_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->slave_pid(), target);
  }
  
  // optional int64 start_time_us = 23;
  if (has_start_time_us()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->start_time_us(), target);
  }
  
  // optional string slave_version = 24;
  if (has_slave_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slave_version().data(), this->slave_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->slave_version(), target);
  }
  
  // repeated string env_vars = 25;
  for (int i = 0; i < this->env_vars_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->env_vars(i).data(), this->env_vars(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(25, this->env_vars(i), target);
  }
  
  // optional string cpuinfo = 30;
  if (has_cpuinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cpuinfo().data(), this->cpuinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->cpuinfo(), target);
  }
  
  // optional string version = 31;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->version(), target);
  }
  
  // optional string etc_mtab = 32;
  if (has_etc_mtab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->etc_mtab().data(), this->etc_mtab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->etc_mtab(), target);
  }
  
  // optional string sysctl = 33;
  if (has_sysctl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sysctl().data(), this->sysctl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->sysctl(), target);
  }
  
  // optional .cetty.zurg.master.SlaveHeartbeat.Uname uname = 34;
  if (has_uname()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->uname(), target);
  }
  
  // optional string meminfo = 40;
  if (has_meminfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meminfo().data(), this->meminfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->meminfo(), target);
  }
  
  // optional string proc_stat = 41;
  if (has_proc_stat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->proc_stat().data(), this->proc_stat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->proc_stat(), target);
  }
  
  // optional string loadavg = 42;
  if (has_loadavg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loadavg().data(), this->loadavg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->loadavg(), target);
  }
  
  // optional string diskstats = 43;
  if (has_diskstats()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->diskstats().data(), this->diskstats().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->diskstats(), target);
  }
  
  // optional string net_dev = 44;
  if (has_net_dev()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->net_dev().data(), this->net_dev().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        44, this->net_dev(), target);
  }
  
  // optional string net_tcp = 45;
  if (has_net_tcp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->net_tcp().data(), this->net_tcp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->net_tcp(), target);
  }
  
  // repeated .cetty.zurg.slave.DiskUsage disk_usage = 50;
  for (int i = 0; i < this->disk_usage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->disk_usage(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlaveHeartbeat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string slave_name = 1;
    if (has_slave_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slave_name());
    }
    
    // required int64 send_time_us = 2;
    if (has_send_time_us()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->send_time_us());
    }
    
    // optional string host_name = 20;
    if (has_host_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_name());
    }
    
    // optional int32 listen_port = 21;
    if (has_listen_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listen_port());
    }
    
    // optional int32 slave_pid = 22;
    if (has_slave_pid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slave_pid());
    }
    
    // optional int64 start_time_us = 23;
    if (has_start_time_us()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time_us());
    }
    
    // optional string slave_version = 24;
    if (has_slave_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slave_version());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string cpuinfo = 30;
    if (has_cpuinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpuinfo());
    }
    
    // optional string version = 31;
    if (has_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional string etc_mtab = 32;
    if (has_etc_mtab()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->etc_mtab());
    }
    
    // optional string sysctl = 33;
    if (has_sysctl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sysctl());
    }
    
    // optional .cetty.zurg.master.SlaveHeartbeat.Uname uname = 34;
    if (has_uname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->uname());
    }
    
    // optional string meminfo = 40;
    if (has_meminfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meminfo());
    }
    
    // optional string proc_stat = 41;
    if (has_proc_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proc_stat());
    }
    
    // optional string loadavg = 42;
    if (has_loadavg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loadavg());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string diskstats = 43;
    if (has_diskstats()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->diskstats());
    }
    
    // optional string net_dev = 44;
    if (has_net_dev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net_dev());
    }
    
    // optional string net_tcp = 45;
    if (has_net_tcp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net_tcp());
    }
    
  }
  // repeated string env_vars = 25;
  total_size += 2 * this->env_vars_size();
  for (int i = 0; i < this->env_vars_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->env_vars(i));
  }
  
  // repeated .cetty.zurg.slave.DiskUsage disk_usage = 50;
  total_size += 2 * this->disk_usage_size();
  for (int i = 0; i < this->disk_usage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->disk_usage(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlaveHeartbeat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlaveHeartbeat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlaveHeartbeat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlaveHeartbeat::MergeFrom(const SlaveHeartbeat& from) {
  GOOGLE_CHECK_NE(&from, this);
  env_vars_.MergeFrom(from.env_vars_);
  disk_usage_.MergeFrom(from.disk_usage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slave_name()) {
      set_slave_name(from.slave_name());
    }
    if (from.has_send_time_us()) {
      set_send_time_us(from.send_time_us());
    }
    if (from.has_host_name()) {
      set_host_name(from.host_name());
    }
    if (from.has_listen_port()) {
      set_listen_port(from.listen_port());
    }
    if (from.has_slave_pid()) {
      set_slave_pid(from.slave_pid());
    }
    if (from.has_start_time_us()) {
      set_start_time_us(from.start_time_us());
    }
    if (from.has_slave_version()) {
      set_slave_version(from.slave_version());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cpuinfo()) {
      set_cpuinfo(from.cpuinfo());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_etc_mtab()) {
      set_etc_mtab(from.etc_mtab());
    }
    if (from.has_sysctl()) {
      set_sysctl(from.sysctl());
    }
    if (from.has_uname()) {
      mutable_uname()->::cetty::zurg::master::SlaveHeartbeat_Uname::MergeFrom(from.uname());
    }
    if (from.has_meminfo()) {
      set_meminfo(from.meminfo());
    }
    if (from.has_proc_stat()) {
      set_proc_stat(from.proc_stat());
    }
    if (from.has_loadavg()) {
      set_loadavg(from.loadavg());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_diskstats()) {
      set_diskstats(from.diskstats());
    }
    if (from.has_net_dev()) {
      set_net_dev(from.net_dev());
    }
    if (from.has_net_tcp()) {
      set_net_tcp(from.net_tcp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlaveHeartbeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlaveHeartbeat::CopyFrom(const SlaveHeartbeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlaveHeartbeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_uname()) {
    if (!this->uname().IsInitialized()) return false;
  }
  for (int i = 0; i < disk_usage_size(); i++) {
    if (!this->disk_usage(i).IsInitialized()) return false;
  }
  return true;
}

void SlaveHeartbeat::Swap(SlaveHeartbeat* other) {
  if (other != this) {
    std::swap(slave_name_, other->slave_name_);
    std::swap(send_time_us_, other->send_time_us_);
    std::swap(host_name_, other->host_name_);
    std::swap(listen_port_, other->listen_port_);
    std::swap(slave_pid_, other->slave_pid_);
    std::swap(start_time_us_, other->start_time_us_);
    std::swap(slave_version_, other->slave_version_);
    env_vars_.Swap(&other->env_vars_);
    std::swap(cpuinfo_, other->cpuinfo_);
    std::swap(version_, other->version_);
    std::swap(etc_mtab_, other->etc_mtab_);
    std::swap(sysctl_, other->sysctl_);
    std::swap(uname_, other->uname_);
    std::swap(meminfo_, other->meminfo_);
    std::swap(proc_stat_, other->proc_stat_);
    std::swap(loadavg_, other->loadavg_);
    std::swap(diskstats_, other->diskstats_);
    std::swap(net_dev_, other->net_dev_);
    std::swap(net_tcp_, other->net_tcp_);
    disk_usage_.Swap(&other->disk_usage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlaveHeartbeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlaveHeartbeat_descriptor_;
  metadata.reflection = SlaveHeartbeat_reflection_;
  return metadata;
}


// ===================================================================

MasterService::~MasterService() {}

const ::google::protobuf::ServiceDescriptor* MasterService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* MasterService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return MasterService_descriptor_;
}

void MasterService::slaveHeartbeat(const ConstSlaveHeartbeatPtr& request,
                         const EmptyPtr& response,
                         const DoneCallback& done) {
  assert(0);
}

void MasterService::appStatusChange(const ConstApplicationStatusPtr& request,
                         const EmptyPtr& response,
                         const DoneCallback& done) {
  assert(0);
}

void MasterService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             const ::cetty::protobuf::service::ConstMessagePtr& request,
                             const ::cetty::protobuf::service::MessagePtr& response,
                             const DoneCallback& done) {
  GOOGLE_DCHECK_EQ(method->service(), MasterService_descriptor_);
  switch(method->index()) {
    case 0:
      slaveHeartbeat(static_cast< ConstSlaveHeartbeatPtr>(request),
             static_cast< EmptyPtr>(response),
             done);
      break;
    case 1:
      appStatusChange(static_cast< ConstApplicationStatusPtr>(request),
             static_cast< EmptyPtr>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message* MasterService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return &::cetty::zurg::master::SlaveHeartbeat::default_instance();
    case 1:
      return &::cetty::zurg::slave::ApplicationStatus::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return NULL;
  }
}

const ::google::protobuf::Message* MasterService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return &::cetty::protobuf::service::Empty::default_instance();
    case 1:
      return &::cetty::protobuf::service::Empty::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return NULL;
  }
}

MasterService_Stub::MasterService_Stub(const cetty::service::ClientServicePtr& service)
  : channel_(service), owns_channel_(false) {
    static int init = 0;
    if (!init) {
        ::cetty::protobuf::service::ProtobufServiceRegister& serviceRegister =
            ::cetty::protobuf::service::ProtobufServiceRegister::instance();

       serviceRegister.registerResponsePrototype("cetty.zurg.master.MasterService",
                                                 "slaveHeartbeat",
                                                 &::cetty::protobuf::service::Empty::default_instance());

       serviceRegister.registerResponsePrototype("cetty.zurg.master.MasterService",
                                                 "appStatusChange",
                                                 &::cetty::protobuf::service::Empty::default_instance());

        init = 1;
    }
}
MasterService_Stub::~MasterService_Stub() {
}

void MasterService_Stub::slaveHeartbeat(const ConstSlaveHeartbeatPtr& request,
                              const slaveHeartbeatServiceFuturePtr& future) {
  channel_.CallMethod<ConstSlaveHeartbeatPtr, EmptyPtr>(descriptor()->method(0),
                                                              request,
                                                              future);
}
void MasterService_Stub::appStatusChange(const ConstApplicationStatusPtr& request,
                              const appStatusChangeServiceFuturePtr& future) {
  channel_.CallMethod<ConstApplicationStatusPtr, EmptyPtr>(descriptor()->method(1),
                                                              request,
                                                              future);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace master
}  // namespace zurg
}  // namespace cetty

// @@protoc_insertion_point(global_scope)


