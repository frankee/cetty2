package cetty.service.builder;

import "cetty/config/config_options.proto";

message ServerChannelConfig {
	required bool         reuse_address = 1 [default = true];
	required int32             back_log = 2 [default = 4096];
	optional int32  receive_buffer_size = 3;

    required bool           reuse_child = 8 [default = true];
	required int32 reserved_child_count = 9 [default = 10];
}

message ChildChannelConfig {
	required bool    is_keep_alive = 1 [default = true];
	required bool is_reuse_address = 2 [default = true];
	required bool  is_tcp_no_delay = 3 [default = true];
		
	optional int32           so_linger = 5;
	optional int32    send_buffer_size = 6;
	optional int32 receive_buffer_size = 7;
}

message ServerBuilderConfig {
	message Server {
		//option (config_message_options).template = "{host}:{port}";
		
		// # If you want you can bind a single interface, if the bind option is not
		// # specified all the interfaces will listen for incoming connections.
		// # host: 
		optional string host = 1;
		
		// # Accept connections on the specified port.
		required int32  port = 2;
		
		optional ServerChannelConfig server_channel = 3;
        optional ChildChannelConfig   child_channel = 4;
	}
	
	message Limit {
		required int32 max_concurrent_requests = 1 [default=10000];
	}
	
	message Timeout {
		required int32 connection_timeout = 1 [default=1800];
	}
	
	message Logger {
		optional string logger = 1;
		optional string  level = 2;
	}
	
	// # By default cetty does not run as a daemon. Use 'true' if you need it.
	// # Note that cetty will write a pid file in /var/run/xxx.pid when daemonized.
	// # daemonize : true
	required bool daemonize = 1 [
		(config_options).cmd       = "daemon",
		(config_options).short_cmd = "d"];

	// # When running daemonized, Cetty does not write a pid file by 
	// # default. You can specify a pid file location here if needed.
	// # pidfile: /var/run/your.pid
    optional string pidfile = 2;
	
    required int32 parent_thread_count = 4 [default = 1];
    required int32  child_thread_count = 5 [default = 0];
    
	optional Logger   logger = 7;

    optional Limit     limit = 8;
    optional Timeout timeout = 9;
	
    // # default config for all server channels
	optional ServerChannelConfig server_channel = 10;

    // # default config for all child channels
    optional ChildChannelConfig   child_channel = 11;

	// # examples like:
	// # servers:
	// #   your-server-app:
	// #     port: 8080
	// #     host: 192.168.1.188
	// #   another-server-app:
	// #     port: 8888
	// # 
    repeated Server servers  = 20 [
		(config_options).map = true,
		(config_options).default = "{{http:\":8080\"}, {rpc:\":18080\"}}"
	];
}
