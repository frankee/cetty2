// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cetty/shiro/web/authority.proto

#ifndef PROTOBUF_cetty_2fshiro_2fweb_2fauthority_2eproto__INCLUDED
#define PROTOBUF_cetty_2fshiro_2fweb_2fauthority_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "cetty/protobuf/service/common.pb.h"
// @@protoc_insertion_point(includes)

namespace cetty {
namespace shiro {
namespace web {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cetty_2fshiro_2fweb_2fauthority_2eproto();
void protobuf_AssignDesc_cetty_2fshiro_2fweb_2fauthority_2eproto();
void protobuf_ShutdownFile_cetty_2fshiro_2fweb_2fauthority_2eproto();

class Authority;

// ===================================================================

class Authority : public ::google::protobuf::Message {
 public:
  Authority();
  virtual ~Authority();
  
  Authority(const Authority& from);
  
  inline Authority& operator=(const Authority& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Authority& default_instance();
  
  void Swap(Authority* other);
  
  // implements Message ----------------------------------------------
  
  Authority* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Authority& from);
  void MergeFrom(const Authority& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .cetty.protobuf.service.Session session = 1;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 1;
  inline const ::cetty::protobuf::service::Session& session() const;
  inline ::cetty::protobuf::service::Session* mutable_session();
  inline ::cetty::protobuf::service::Session* release_session();
  
  // optional string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional string signature = 3;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 3;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const char* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  
  // optional string ip = 8;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 8;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // optional string domain_name = 9;
  inline bool has_domain_name() const;
  inline void clear_domain_name();
  static const int kDomainNameFieldNumber = 9;
  inline const ::std::string& domain_name() const;
  inline void set_domain_name(const ::std::string& value);
  inline void set_domain_name(const char* value);
  inline void set_domain_name(const char* value, size_t size);
  inline ::std::string* mutable_domain_name();
  inline ::std::string* release_domain_name();
  
  // @@protoc_insertion_point(class_scope:cetty.shiro.web.Authority)
 private:
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_domain_name();
  inline void clear_has_domain_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::cetty::protobuf::service::Session* session_;
  ::std::string* key_;
  ::std::string* signature_;
  ::std::string* ip_;
  ::std::string* domain_name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_cetty_2fshiro_2fweb_2fauthority_2eproto();
  friend void protobuf_AssignDesc_cetty_2fshiro_2fweb_2fauthority_2eproto();
  friend void protobuf_ShutdownFile_cetty_2fshiro_2fweb_2fauthority_2eproto();
  
  void InitAsDefaultInstance();
  static Authority* default_instance_;
};
// ===================================================================


// ===================================================================

// Authority

// optional .cetty.protobuf.service.Session session = 1;
inline bool Authority::has_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Authority::set_has_session() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Authority::clear_has_session() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Authority::clear_session() {
  if (session_ != NULL) session_->::cetty::protobuf::service::Session::Clear();
  clear_has_session();
}
inline const ::cetty::protobuf::service::Session& Authority::session() const {
  return session_ != NULL ? *session_ : *default_instance_->session_;
}
inline ::cetty::protobuf::service::Session* Authority::mutable_session() {
  set_has_session();
  if (session_ == NULL) session_ = new ::cetty::protobuf::service::Session;
  return session_;
}
inline ::cetty::protobuf::service::Session* Authority::release_session() {
  clear_has_session();
  ::cetty::protobuf::service::Session* temp = session_;
  session_ = NULL;
  return temp;
}

// optional string key = 2;
inline bool Authority::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Authority::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Authority::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Authority::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& Authority::key() const {
  return *key_;
}
inline void Authority::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Authority::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Authority::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Authority::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* Authority::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string signature = 3;
inline bool Authority::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Authority::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Authority::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Authority::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& Authority::signature() const {
  return *signature_;
}
inline void Authority::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Authority::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Authority::set_signature(const char* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Authority::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* Authority::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ip = 8;
inline bool Authority::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Authority::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Authority::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Authority::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Authority::ip() const {
  return *ip_;
}
inline void Authority::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Authority::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Authority::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Authority::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Authority::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string domain_name = 9;
inline bool Authority::has_domain_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Authority::set_has_domain_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Authority::clear_has_domain_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Authority::clear_domain_name() {
  if (domain_name_ != &::google::protobuf::internal::kEmptyString) {
    domain_name_->clear();
  }
  clear_has_domain_name();
}
inline const ::std::string& Authority::domain_name() const {
  return *domain_name_;
}
inline void Authority::set_domain_name(const ::std::string& value) {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    domain_name_ = new ::std::string;
  }
  domain_name_->assign(value);
}
inline void Authority::set_domain_name(const char* value) {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    domain_name_ = new ::std::string;
  }
  domain_name_->assign(value);
}
inline void Authority::set_domain_name(const char* value, size_t size) {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    domain_name_ = new ::std::string;
  }
  domain_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Authority::mutable_domain_name() {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    domain_name_ = new ::std::string;
  }
  return domain_name_;
}
inline ::std::string* Authority::release_domain_name() {
  clear_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = domain_name_;
    domain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace web
}  // namespace shiro
}  // namespace cetty

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cetty_2fshiro_2fweb_2fauthority_2eproto__INCLUDED


// Local Variables:
// mode: c++
// End:

