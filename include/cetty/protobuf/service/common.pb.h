// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cetty/protobuf/service/common.proto

#ifndef PROTOBUF_cetty_2fprotobuf_2fservice_2fcommon_2eproto__INCLUDED
#define PROTOBUF_cetty_2fprotobuf_2fservice_2fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace cetty {
namespace protobuf {
namespace service {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cetty_2fprotobuf_2fservice_2fcommon_2eproto();
void protobuf_AssignDesc_cetty_2fprotobuf_2fservice_2fcommon_2eproto();
void protobuf_ShutdownFile_cetty_2fprotobuf_2fservice_2fcommon_2eproto();

class KeyValue;
class Status;
class Status_SubError;
class Session;

enum Lang {
  zh_CN = 0,
  zh_TW = 1,
  en_US = 2
};
bool Lang_IsValid(int value);
const Lang Lang_MIN = zh_CN;
const Lang Lang_MAX = en_US;
const int Lang_ARRAYSIZE = Lang_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lang_descriptor();
inline const ::std::string& Lang_Name(Lang value) {
  return ::google::protobuf::internal::NameOfEnum(
    Lang_descriptor(), value);
}
inline bool Lang_Parse(
    const ::std::string& name, Lang* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Lang>(
    Lang_descriptor(), name, value);
}
// ===================================================================

class KeyValue : public ::google::protobuf::Message {
 public:
  KeyValue();
  virtual ~KeyValue();
  
  KeyValue(const KeyValue& from);
  
  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValue& default_instance();
  
  void Swap(KeyValue* other);
  
  // implements Message ----------------------------------------------
  
  KeyValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:cetty.protobuf.service.KeyValue)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cetty_2fprotobuf_2fservice_2fcommon_2eproto();
  friend void protobuf_AssignDesc_cetty_2fprotobuf_2fservice_2fcommon_2eproto();
  friend void protobuf_ShutdownFile_cetty_2fprotobuf_2fservice_2fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class Status_SubError : public ::google::protobuf::Message {
 public:
  Status_SubError();
  virtual ~Status_SubError();
  
  Status_SubError(const Status_SubError& from);
  
  inline Status_SubError& operator=(const Status_SubError& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Status_SubError& default_instance();
  
  void Swap(Status_SubError* other);
  
  // implements Message ----------------------------------------------
  
  Status_SubError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status_SubError& from);
  void MergeFrom(const Status_SubError& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  
  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // @@protoc_insertion_point(class_scope:cetty.protobuf.service.Status.SubError)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_message();
  inline void clear_has_message();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* code_;
  ::std::string* message_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cetty_2fprotobuf_2fservice_2fcommon_2eproto();
  friend void protobuf_AssignDesc_cetty_2fprotobuf_2fservice_2fcommon_2eproto();
  friend void protobuf_ShutdownFile_cetty_2fprotobuf_2fservice_2fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static Status_SubError* default_instance_;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message {
 public:
  Status();
  virtual ~Status();
  
  Status(const Status& from);
  
  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();
  
  void Swap(Status* other);
  
  // implements Message ----------------------------------------------
  
  Status* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Status_SubError SubError;
  
  // accessors -------------------------------------------------------
  
  // optional int32 code = 1 [default = 0];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);
  
  // optional string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  
  // repeated .cetty.protobuf.service.Status.SubError sub_errors = 3;
  inline int sub_errors_size() const;
  inline void clear_sub_errors();
  static const int kSubErrorsFieldNumber = 3;
  inline const ::cetty::protobuf::service::Status_SubError& sub_errors(int index) const;
  inline ::cetty::protobuf::service::Status_SubError* mutable_sub_errors(int index);
  inline ::cetty::protobuf::service::Status_SubError* add_sub_errors();
  inline const ::google::protobuf::RepeatedPtrField< ::cetty::protobuf::service::Status_SubError >&
      sub_errors() const;
  inline ::google::protobuf::RepeatedPtrField< ::cetty::protobuf::service::Status_SubError >*
      mutable_sub_errors();
  
  // @@protoc_insertion_point(class_scope:cetty.protobuf.service.Status)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_message();
  inline void clear_has_message();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* message_;
  ::google::protobuf::RepeatedPtrField< ::cetty::protobuf::service::Status_SubError > sub_errors_;
  ::google::protobuf::int32 code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_cetty_2fprotobuf_2fservice_2fcommon_2eproto();
  friend void protobuf_AssignDesc_cetty_2fprotobuf_2fservice_2fcommon_2eproto();
  friend void protobuf_ShutdownFile_cetty_2fprotobuf_2fservice_2fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// -------------------------------------------------------------------

class Session : public ::google::protobuf::Message {
 public:
  Session();
  virtual ~Session();
  
  Session(const Session& from);
  
  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Session& default_instance();
  
  void Swap(Session* other);
  
  // implements Message ----------------------------------------------
  
  Session* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // repeated .cetty.protobuf.service.KeyValue items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::cetty::protobuf::service::KeyValue& items(int index) const;
  inline ::cetty::protobuf::service::KeyValue* mutable_items(int index);
  inline ::cetty::protobuf::service::KeyValue* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::cetty::protobuf::service::KeyValue >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::cetty::protobuf::service::KeyValue >*
      mutable_items();
  
  // @@protoc_insertion_point(class_scope:cetty.protobuf.service.Session)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::cetty::protobuf::service::KeyValue > items_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_cetty_2fprotobuf_2fservice_2fcommon_2eproto();
  friend void protobuf_AssignDesc_cetty_2fprotobuf_2fservice_2fcommon_2eproto();
  friend void protobuf_ShutdownFile_cetty_2fprotobuf_2fservice_2fcommon_2eproto();
  
  void InitAsDefaultInstance();
  static Session* default_instance_;
};
// ===================================================================


// ===================================================================

// KeyValue

// optional string key = 1;
inline bool KeyValue::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValue::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValue::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValue::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& KeyValue::key() const {
  return *key_;
}
inline void KeyValue::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyValue::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyValue::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValue::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* KeyValue::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string value = 2;
inline bool KeyValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyValue::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& KeyValue::value() const {
  return *value_;
}
inline void KeyValue::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KeyValue::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void KeyValue::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValue::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* KeyValue::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Status_SubError

// optional string code = 1;
inline bool Status_SubError::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Status_SubError::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Status_SubError::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Status_SubError::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& Status_SubError::code() const {
  return *code_;
}
inline void Status_SubError::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void Status_SubError::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void Status_SubError::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Status_SubError::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* Status_SubError::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string message = 2;
inline bool Status_SubError::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Status_SubError::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Status_SubError::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Status_SubError::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Status_SubError::message() const {
  return *message_;
}
inline void Status_SubError::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Status_SubError::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Status_SubError::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Status_SubError::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* Status_SubError::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Status

// optional int32 code = 1 [default = 0];
inline bool Status::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Status::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Status::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Status::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Status::code() const {
  return code_;
}
inline void Status::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional string message = 2;
inline bool Status::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Status::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Status::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Status::clear_message() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Status::message() const {
  return *message_;
}
inline void Status::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Status::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(value);
}
inline void Status::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Status::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    message_ = new ::std::string;
  }
  return message_;
}
inline ::std::string* Status::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .cetty.protobuf.service.Status.SubError sub_errors = 3;
inline int Status::sub_errors_size() const {
  return sub_errors_.size();
}
inline void Status::clear_sub_errors() {
  sub_errors_.Clear();
}
inline const ::cetty::protobuf::service::Status_SubError& Status::sub_errors(int index) const {
  return sub_errors_.Get(index);
}
inline ::cetty::protobuf::service::Status_SubError* Status::mutable_sub_errors(int index) {
  return sub_errors_.Mutable(index);
}
inline ::cetty::protobuf::service::Status_SubError* Status::add_sub_errors() {
  return sub_errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cetty::protobuf::service::Status_SubError >&
Status::sub_errors() const {
  return sub_errors_;
}
inline ::google::protobuf::RepeatedPtrField< ::cetty::protobuf::service::Status_SubError >*
Status::mutable_sub_errors() {
  return &sub_errors_;
}

// -------------------------------------------------------------------

// Session

// required string id = 1;
inline bool Session::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Session::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Session::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Session::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Session::id() const {
  return *id_;
}
inline void Session::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Session::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Session::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Session::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* Session::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .cetty.protobuf.service.KeyValue items = 2;
inline int Session::items_size() const {
  return items_.size();
}
inline void Session::clear_items() {
  items_.Clear();
}
inline const ::cetty::protobuf::service::KeyValue& Session::items(int index) const {
  return items_.Get(index);
}
inline ::cetty::protobuf::service::KeyValue* Session::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::cetty::protobuf::service::KeyValue* Session::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cetty::protobuf::service::KeyValue >&
Session::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::cetty::protobuf::service::KeyValue >*
Session::mutable_items() {
  return &items_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace service
}  // namespace protobuf
}  // namespace cetty

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< cetty::protobuf::service::Lang>() {
  return cetty::protobuf::service::Lang_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cetty_2fprotobuf_2fservice_2fcommon_2eproto__INCLUDED


// Local Variables:
// mode: c++
// End:

