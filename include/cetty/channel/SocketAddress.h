#if !defined(CETTY_CHANNEL_SOCKETADDRESS_H)
#define CETTY_CHANNEL_SOCKETADDRESS_H

// Copyright (c) 2005-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

/*
 * Copyright (c) 2010-2011 frankee zhou (frankee.zhou at gmail dot com)
 *
 * Distributed under under the Apache License, version 2.0 (the "License").
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

#include <string>
#include <boost/smart_ptr.hpp>

namespace cetty {
namespace channel {

class IpAddress;
class SocketAddressImpl;
class SocketAddressImplFactory;

/**
 * This class represents an internet (IP) endpoint/socket
 * address. The address can belong either to the
 * IPv4 or the IPv6 address family and consists of a
 * host address and a port number.
 */
class SocketAddress {
public:
    typedef boost::intrusive_ptr<SocketAddressImpl> SmartPointer;

public:
    static const SocketAddress NULL_ADDRESS;

public:
    SocketAddress();

    /**
     * Creates a wildcard (all zero) IPv4 SocketAddress.
     */
    SocketAddress(int family);


    SocketAddress(int family, int port);

    /**
     * Creates a SocketAddress from an IP address and a port number.
     */
    SocketAddress(const IpAddress& host, int port);

    /**
     * Creates a SocketAddress from an IP address and a port number.
     *
     * The IP address must either be a domain name, or it must
     * be in dotted decimal (IPv4) or hex string (IPv6) format.
     */
    SocketAddress(const std::string& host, int port);

    /**
     * Creates a SocketAddress from an IP address and a
     * service name or port number.
     *
     * The IP address must either be a domain name, or it must
     * be in dotted decimal (IPv4) or hex string (IPv6) format.
     *
     * The given port must either be a decimal port number, or
     * a service name.
     */
    SocketAddress(const std::string& host, const std::string& port);

    /**
     * Creates a SocketAddress from an IP address or host name and a
     * port number/service name. Host name/address and port number must
     * be separated by a colon. In case of an IPv6 address,
     * the address part must be enclosed in brackets.
     *
     * Examples:
     *     192.168.1.10:80
     *     [::FFFF:192.168.1.120]:2040
     *     www.appinf.com:8080
     */
    explicit SocketAddress(const std::string& hostAndPort);

    /**
     * Creates a SocketAddress by copying another one.
     */
    SocketAddress(const SocketAddress& addr);

    SocketAddress(const SmartPointer& impl);

    ~SocketAddress();

    /**
     * Assigns another SocketAddress.
     */
    SocketAddress& operator = (const SocketAddress& addr);

    bool operator ==(const SocketAddress& addr) const;
    bool operator !=(const SocketAddress& addr) const;

    /**
     * Swaps the SocketAddress with another one.
     */
    void swap(SocketAddress& addr);

    /**
     * Returns the host IP address.
     */
    const IpAddress& ipAddress() const;

    std::string address() const;

    std::string hostName() const;

    /**
     * Returns the port number.
     */
    int port() const;

    /**
     * Returns the address family of the host's address.
     */
    int family() const;

    /**
     * return the SocketAddress is not a NULL_ADDRESS.
     */
    bool validated() const { return impl; }

    /**
     * Returns a string representation of the address.
     */
    std::string toString() const;

    static void setFacotry(SocketAddressImplFactory* factory);
    static void resetFactory();
    static bool hasFactory();

private:
    void init(const std::string& host, const std::string& port);
    void init(const std::string& host, int port);

private:
    SmartPointer impl;
    static SocketAddressImplFactory* factory;
};

inline void swap(SocketAddress& a1, SocketAddress& a2) {
    a1.swap(a2);
}

}
}

#endif //#if !defined(CETTY_CHANNEL_SOCKETADDRESS_H)

// Local Variables:
// mode: c++
// End:

