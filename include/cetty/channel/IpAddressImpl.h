#if !defined(CETTY_CHANNEL_IPADDRESSIMPL_H)
#define CETTY_CHANNEL_IPADDRESSIMPL_H

// Copyright (c) 2005-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
/*
 * Copyright (c) 2010-2011 frankee zhou (frankee.zhou at gmail dot com)
 *
 * Distributed under under the Apache License, version 2.0 (the "License").
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at:
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

#include <cetty/util/ReferenceCounter.h>

namespace cetty {
namespace channel {

class IpAddressImpl : public cetty::util::ReferenceCounter<IpAddressImpl> {
public:
    virtual ~IpAddressImpl() {}

    virtual std::string toString() const = 0;
    virtual int family() const = 0;

    virtual bool isWildcard() const = 0;
    virtual bool isBroadcast() const = 0;
    virtual bool isLoopback() const = 0;
    virtual bool isMulticast() const = 0;
    virtual bool isLinkLocal() const = 0;
    virtual bool isSiteLocal() const = 0;
    virtual bool isIPv4Mapped() const = 0;
    virtual bool isIPv4Compatible() const = 0;
    virtual bool isWellKnownMC() const = 0;
    virtual bool isNodeLocalMC() const = 0;
    virtual bool isLinkLocalMC() const = 0;
    virtual bool isSiteLocalMC() const = 0;
    virtual bool isOrgLocalMC() const = 0;
    virtual bool isGlobalMC() const = 0;

    virtual bool equals(const IpAddressImpl& ipAddress) const = 0;
    virtual int  compareTo(const IpAddressImpl& ipAddress) const = 0;

    virtual void mask(const IpAddressImpl& pMask, const IpAddressImpl& pSet) = 0;
    virtual IpAddressImpl* clone() const = 0;

protected:
    IpAddressImpl() {}

private:
    IpAddressImpl(const IpAddressImpl&);
    IpAddressImpl& operator = (const IpAddressImpl&);
};

class IpAddressImplFactory {
public:
    virtual ~IpAddressImplFactory() {}

    virtual IpAddressImpl* create(int family) = 0;
    virtual IpAddressImpl* create(const std::string& addr) = 0;
    virtual IpAddressImpl* create(const std::string& addr,int family) = 0;
};

}
}

#endif //#if !defined(CETTY_CHANNEL_IPADDRESSIMPL_H)

// Local Variables:
// mode: c++
// End:

