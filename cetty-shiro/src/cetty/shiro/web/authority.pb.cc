// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cetty/shiro/web/authority.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <cetty/protobuf/service/ProtobufServiceRegister.h>
// @@protoc_insertion_point(includes)

namespace cetty {
namespace shiro {
namespace web {

namespace {

const ::google::protobuf::Descriptor* Authority_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Authority_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cetty_2fshiro_2fweb_2fauthority_2eproto() {
  protobuf_AddDesc_cetty_2fshiro_2fweb_2fauthority_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cetty/shiro/web/authority.proto");
  GOOGLE_CHECK(file != NULL);
  Authority_descriptor_ = file->message_type(0);
  static const int Authority_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authority, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authority, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authority, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authority, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authority, domain_name_),
  };
  Authority_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Authority_descriptor_,
      Authority::default_instance_,
      Authority_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authority, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Authority, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Authority));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cetty_2fshiro_2fweb_2fauthority_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Authority_descriptor_, &Authority::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cetty_2fshiro_2fweb_2fauthority_2eproto() {
  delete Authority::default_instance_;
  delete Authority_reflection_;
}

void protobuf_AddDesc_cetty_2fshiro_2fweb_2fauthority_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cetty::protobuf::service::protobuf_AddDesc_cetty_2fprotobuf_2fservice_2fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037cetty/shiro/web/authority.proto\022\017cetty"
    ".shiro.web\032#cetty/protobuf/service/commo"
    "n.proto\"~\n\tAuthority\0220\n\007session\030\001 \001(\0132\037."
    "cetty.protobuf.service.Session\022\013\n\003key\030\002 "
    "\001(\t\022\021\n\tsignature\030\003 \001(\t\022\n\n\002ip\030\010 \001(\t\022\023\n\013do"
    "main_name\030\t \001(\tB!\n\017cetty.shiro.webB\016Auth"
    "orityProto", 250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cetty/shiro/web/authority.proto", &protobuf_RegisterTypes);
  Authority::default_instance_ = new Authority();
  Authority::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cetty_2fshiro_2fweb_2fauthority_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cetty_2fshiro_2fweb_2fauthority_2eproto {
  StaticDescriptorInitializer_cetty_2fshiro_2fweb_2fauthority_2eproto() {
    protobuf_AddDesc_cetty_2fshiro_2fweb_2fauthority_2eproto();
  }
} static_descriptor_initializer_cetty_2fshiro_2fweb_2fauthority_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Authority::kSessionFieldNumber;
const int Authority::kKeyFieldNumber;
const int Authority::kSignatureFieldNumber;
const int Authority::kIpFieldNumber;
const int Authority::kDomainNameFieldNumber;
#endif  // !_MSC_VER

Authority::Authority()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Authority::InitAsDefaultInstance() {
  session_ = const_cast< ::cetty::protobuf::service::Session*>(&::cetty::protobuf::service::Session::default_instance());
}

Authority::Authority(const Authority& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Authority::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  domain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Authority::~Authority() {
  SharedDtor();
}

void Authority::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (domain_name_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_name_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void Authority::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Authority::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Authority_descriptor_;
}

const Authority& Authority::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fshiro_2fweb_2fauthority_2eproto();  return *default_instance_;
}

Authority* Authority::default_instance_ = NULL;

Authority* Authority::New() const {
  return new Authority;
}

void Authority::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::cetty::protobuf::service::Session::Clear();
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_domain_name()) {
      if (domain_name_ != &::google::protobuf::internal::kEmptyString) {
        domain_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Authority::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cetty.protobuf.service.Session session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // optional string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signature;
        break;
      }
      
      // optional string signature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ip;
        break;
      }
      
      // optional string ip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_domain_name;
        break;
      }
      
      // optional string domain_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain_name().data(), this->domain_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Authority::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cetty.protobuf.service.Session session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }
  
  // optional string signature = 3;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->signature(), output);
  }
  
  // optional string ip = 8;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->ip(), output);
  }
  
  // optional string domain_name = 9;
  if (has_domain_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain_name().data(), this->domain_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->domain_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Authority::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cetty.protobuf.service.Session session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  // optional string key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }
  
  // optional string signature = 3;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->signature(), target);
  }
  
  // optional string ip = 8;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ip(), target);
  }
  
  // optional string domain_name = 9;
  if (has_domain_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain_name().data(), this->domain_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->domain_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Authority::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cetty.protobuf.service.Session session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // optional string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // optional string signature = 3;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }
    
    // optional string ip = 8;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string domain_name = 9;
    if (has_domain_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Authority::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Authority* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Authority*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Authority::MergeFrom(const Authority& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::cetty::protobuf::service::Session::MergeFrom(from.session());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_domain_name()) {
      set_domain_name(from.domain_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Authority::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Authority::CopyFrom(const Authority& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Authority::IsInitialized() const {
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void Authority::Swap(Authority* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(key_, other->key_);
    std::swap(signature_, other->signature_);
    std::swap(ip_, other->ip_);
    std::swap(domain_name_, other->domain_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Authority::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Authority_descriptor_;
  metadata.reflection = Authority_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace web
}  // namespace shiro
}  // namespace cetty

// @@protoc_insertion_point(global_scope)


