// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cetty/shiro/web/authentication.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
#include <cetty/protobuf/service/ProtobufServiceRegister.h>
// @@protoc_insertion_point(includes)

namespace cetty {
namespace shiro {
namespace web {

namespace {

const ::google::protobuf::Descriptor* PreLoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PreLoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PreLoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PreLoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* AuthenticationService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cetty_2fshiro_2fweb_2fauthentication_2eproto() {
  protobuf_AddDesc_cetty_2fshiro_2fweb_2fauthentication_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cetty/shiro/web/authentication.proto");
  GOOGLE_CHECK(file != NULL);
  PreLoginRequest_descriptor_ = file->message_type(0);
  static const int PreLoginRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreLoginRequest, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreLoginRequest, user_name_),
  };
  PreLoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PreLoginRequest_descriptor_,
      PreLoginRequest::default_instance_,
      PreLoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreLoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreLoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PreLoginRequest));
  PreLoginResponse_descriptor_ = file->message_type(1);
  static const int PreLoginResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreLoginResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreLoginResponse, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreLoginResponse, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreLoginResponse, server_time_),
  };
  PreLoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PreLoginResponse_descriptor_,
      PreLoginResponse::default_instance_,
      PreLoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreLoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PreLoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PreLoginResponse));
  LoginRequest_descriptor_ = file->message_type(2);
  static const int LoginRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, server_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, encode_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, encoded_passwd_),
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  LoginResponse_descriptor_ = file->message_type(3);
  static const int LoginResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, session_),
  };
  LoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginResponse_descriptor_,
      LoginResponse::default_instance_,
      LoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginResponse));
  LogoutRequest_descriptor_ = file->message_type(4);
  static const int LogoutRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, session_),
  };
  LogoutRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutRequest_descriptor_,
      LogoutRequest::default_instance_,
      LogoutRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutRequest));
  LogoutResponse_descriptor_ = file->message_type(5);
  static const int LogoutResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, status_),
  };
  LogoutResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutResponse_descriptor_,
      LogoutResponse::default_instance_,
      LogoutResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutResponse));
  AuthenticationService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cetty_2fshiro_2fweb_2fauthentication_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PreLoginRequest_descriptor_, &PreLoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PreLoginResponse_descriptor_, &PreLoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginResponse_descriptor_, &LoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutRequest_descriptor_, &LogoutRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutResponse_descriptor_, &LogoutResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cetty_2fshiro_2fweb_2fauthentication_2eproto() {
  delete PreLoginRequest::default_instance_;
  delete PreLoginRequest_reflection_;
  delete PreLoginResponse::default_instance_;
  delete PreLoginResponse_reflection_;
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete LoginResponse::default_instance_;
  delete LoginResponse_reflection_;
  delete LogoutRequest::default_instance_;
  delete LogoutRequest_reflection_;
  delete LogoutResponse::default_instance_;
  delete LogoutResponse_reflection_;
}

void protobuf_AddDesc_cetty_2fshiro_2fweb_2fauthentication_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cetty::protobuf::service::protobuf_AddDesc_cetty_2fprotobuf_2fservice_2fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$cetty/shiro/web/authentication.proto\022\017"
    "cetty.shiro.web\032#cetty/protobuf/service/"
    "common.proto\"2\n\017PreLoginRequest\022\014\n\004host\030"
    "\001 \002(\t\022\021\n\tuser_name\030\002 \002(\t\"\230\001\n\020PreLoginRes"
    "ponse\022.\n\006status\030\001 \001(\0132\036.cetty.protobuf.s"
    "ervice.Status\0220\n\007session\030\002 \001(\0132\037.cetty.p"
    "rotobuf.service.Session\022\r\n\005nonce\030\003 \001(\t\022\023"
    "\n\013server_time\030\004 \001(\t\"r\n\014LoginRequest\022\021\n\tu"
    "ser_name\030\001 \001(\t\022\r\n\005nonce\030\002 \001(\t\022\023\n\013server_"
    "time\030\003 \001(\t\022\023\n\013encode_type\030\010 \001(\t\022\026\n\016encod"
    "ed_passwd\030\t \001(\t\"q\n\rLoginResponse\022.\n\006stat"
    "us\030\001 \001(\0132\036.cetty.protobuf.service.Status"
    "\0220\n\007session\030\002 \001(\0132\037.cetty.protobuf.servi"
    "ce.Session\"A\n\rLogoutRequest\0220\n\007session\030\001"
    " \001(\0132\037.cetty.protobuf.service.Session\"@\n"
    "\016LogoutResponse\022.\n\006status\030\001 \001(\0132\036.cetty."
    "protobuf.service.Status2\373\001\n\025Authenticati"
    "onService\022O\n\010preLogin\022 .cetty.shiro.web."
    "PreLoginRequest\032!.cetty.shiro.web.PreLog"
    "inResponse\022F\n\005login\022\035.cetty.shiro.web.Lo"
    "ginRequest\032\036.cetty.shiro.web.LoginRespon"
    "se\022I\n\006logout\022\036.cetty.shiro.web.LogoutReq"
    "uest\032\037.cetty.shiro.web.LogoutResponseB%\n"
    "\017cetty.shiro.webB\tAuthProto\200\001\001\210\001\001\220\001\001", 956);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cetty/shiro/web/authentication.proto", &protobuf_RegisterTypes);
  PreLoginRequest::default_instance_ = new PreLoginRequest();
  PreLoginResponse::default_instance_ = new PreLoginResponse();
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResponse::default_instance_ = new LoginResponse();
  LogoutRequest::default_instance_ = new LogoutRequest();
  LogoutResponse::default_instance_ = new LogoutResponse();
  PreLoginRequest::default_instance_->InitAsDefaultInstance();
  PreLoginResponse::default_instance_->InitAsDefaultInstance();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  LogoutRequest::default_instance_->InitAsDefaultInstance();
  LogoutResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cetty_2fshiro_2fweb_2fauthentication_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cetty_2fshiro_2fweb_2fauthentication_2eproto {
  StaticDescriptorInitializer_cetty_2fshiro_2fweb_2fauthentication_2eproto() {
    protobuf_AddDesc_cetty_2fshiro_2fweb_2fauthentication_2eproto();
  }
} static_descriptor_initializer_cetty_2fshiro_2fweb_2fauthentication_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PreLoginRequest::kHostFieldNumber;
const int PreLoginRequest::kUserNameFieldNumber;
#endif  // !_MSC_VER

PreLoginRequest::PreLoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PreLoginRequest::InitAsDefaultInstance() {
}

PreLoginRequest::PreLoginRequest(const PreLoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PreLoginRequest::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreLoginRequest::~PreLoginRequest() {
  SharedDtor();
}

void PreLoginRequest::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void PreLoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreLoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreLoginRequest_descriptor_;
}

const PreLoginRequest& PreLoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fshiro_2fweb_2fauthentication_2eproto();  return *default_instance_;
}

PreLoginRequest* PreLoginRequest::default_instance_ = NULL;

PreLoginRequest* PreLoginRequest::New() const {
  return new PreLoginRequest;
}

void PreLoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PreLoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }
      
      // required string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreLoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }
  
  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PreLoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }
  
  // required string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PreLoginRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreLoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PreLoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PreLoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PreLoginRequest::MergeFrom(const PreLoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PreLoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreLoginRequest::CopyFrom(const PreLoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreLoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PreLoginRequest::Swap(PreLoginRequest* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PreLoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PreLoginRequest_descriptor_;
  metadata.reflection = PreLoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PreLoginResponse::kStatusFieldNumber;
const int PreLoginResponse::kSessionFieldNumber;
const int PreLoginResponse::kNonceFieldNumber;
const int PreLoginResponse::kServerTimeFieldNumber;
#endif  // !_MSC_VER

PreLoginResponse::PreLoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PreLoginResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::cetty::protobuf::service::Status*>(&::cetty::protobuf::service::Status::default_instance());
  session_ = const_cast< ::cetty::protobuf::service::Session*>(&::cetty::protobuf::service::Session::default_instance());
}

PreLoginResponse::PreLoginResponse(const PreLoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PreLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  session_ = NULL;
  nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreLoginResponse::~PreLoginResponse() {
  SharedDtor();
}

void PreLoginResponse::SharedDtor() {
  if (nonce_ != &::google::protobuf::internal::kEmptyString) {
    delete nonce_;
  }
  if (server_time_ != &::google::protobuf::internal::kEmptyString) {
    delete server_time_;
  }
  if (this != default_instance_) {
    delete status_;
    delete session_;
  }
}

void PreLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PreLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreLoginResponse_descriptor_;
}

const PreLoginResponse& PreLoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fshiro_2fweb_2fauthentication_2eproto();  return *default_instance_;
}

PreLoginResponse* PreLoginResponse::default_instance_ = NULL;

PreLoginResponse* PreLoginResponse::New() const {
  return new PreLoginResponse;
}

void PreLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::cetty::protobuf::service::Status::Clear();
    }
    if (has_session()) {
      if (session_ != NULL) session_->::cetty::protobuf::service::Session::Clear();
    }
    if (has_nonce()) {
      if (nonce_ != &::google::protobuf::internal::kEmptyString) {
        nonce_->clear();
      }
    }
    if (has_server_time()) {
      if (server_time_ != &::google::protobuf::internal::kEmptyString) {
        server_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PreLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cetty.protobuf.service.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session;
        break;
      }
      
      // optional .cetty.protobuf.service.Session session = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nonce;
        break;
      }
      
      // optional string nonce = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nonce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nonce().data(), this->nonce().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_time;
        break;
      }
      
      // optional string server_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_time().data(), this->server_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cetty.protobuf.service.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  // optional .cetty.protobuf.service.Session session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->session(), output);
  }
  
  // optional string nonce = 3;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nonce().data(), this->nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nonce(), output);
  }
  
  // optional string server_time = 4;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_time().data(), this->server_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->server_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PreLoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cetty.protobuf.service.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  // optional .cetty.protobuf.service.Session session = 2;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->session(), target);
  }
  
  // optional string nonce = 3;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nonce().data(), this->nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nonce(), target);
  }
  
  // optional string server_time = 4;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_time().data(), this->server_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PreLoginResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cetty.protobuf.service.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
    // optional .cetty.protobuf.service.Session session = 2;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
    // optional string nonce = 3;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nonce());
    }
    
    // optional string server_time = 4;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PreLoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PreLoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PreLoginResponse::MergeFrom(const PreLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::cetty::protobuf::service::Status::MergeFrom(from.status());
    }
    if (from.has_session()) {
      mutable_session()->::cetty::protobuf::service::Session::MergeFrom(from.session());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PreLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PreLoginResponse::CopyFrom(const PreLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreLoginResponse::IsInitialized() const {
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void PreLoginResponse::Swap(PreLoginResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(session_, other->session_);
    std::swap(nonce_, other->nonce_);
    std::swap(server_time_, other->server_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PreLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PreLoginResponse_descriptor_;
  metadata.reflection = PreLoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kUserNameFieldNumber;
const int LoginRequest::kNonceFieldNumber;
const int LoginRequest::kServerTimeFieldNumber;
const int LoginRequest::kEncodeTypeFieldNumber;
const int LoginRequest::kEncodedPasswdFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nonce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encode_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  encoded_passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (nonce_ != &::google::protobuf::internal::kEmptyString) {
    delete nonce_;
  }
  if (server_time_ != &::google::protobuf::internal::kEmptyString) {
    delete server_time_;
  }
  if (encode_type_ != &::google::protobuf::internal::kEmptyString) {
    delete encode_type_;
  }
  if (encoded_passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete encoded_passwd_;
  }
  if (this != default_instance_) {
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fshiro_2fweb_2fauthentication_2eproto();  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_nonce()) {
      if (nonce_ != &::google::protobuf::internal::kEmptyString) {
        nonce_->clear();
      }
    }
    if (has_server_time()) {
      if (server_time_ != &::google::protobuf::internal::kEmptyString) {
        server_time_->clear();
      }
    }
    if (has_encode_type()) {
      if (encode_type_ != &::google::protobuf::internal::kEmptyString) {
        encode_type_->clear();
      }
    }
    if (has_encoded_passwd()) {
      if (encoded_passwd_ != &::google::protobuf::internal::kEmptyString) {
        encoded_passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nonce;
        break;
      }
      
      // optional string nonce = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nonce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nonce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nonce().data(), this->nonce().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_time;
        break;
      }
      
      // optional string server_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_time().data(), this->server_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_encode_type;
        break;
      }
      
      // optional string encode_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encode_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encode_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->encode_type().data(), this->encode_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_encoded_passwd;
        break;
      }
      
      // optional string encoded_passwd = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encoded_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encoded_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->encoded_passwd().data(), this->encoded_passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_name(), output);
  }
  
  // optional string nonce = 2;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nonce().data(), this->nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nonce(), output);
  }
  
  // optional string server_time = 3;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_time().data(), this->server_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_time(), output);
  }
  
  // optional string encode_type = 8;
  if (has_encode_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->encode_type().data(), this->encode_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->encode_type(), output);
  }
  
  // optional string encoded_passwd = 9;
  if (has_encoded_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->encoded_passwd().data(), this->encoded_passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->encoded_passwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user_name = 1;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_name(), target);
  }
  
  // optional string nonce = 2;
  if (has_nonce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nonce().data(), this->nonce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nonce(), target);
  }
  
  // optional string server_time = 3;
  if (has_server_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_time().data(), this->server_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_time(), target);
  }
  
  // optional string encode_type = 8;
  if (has_encode_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->encode_type().data(), this->encode_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->encode_type(), target);
  }
  
  // optional string encoded_passwd = 9;
  if (has_encoded_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->encoded_passwd().data(), this->encoded_passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->encoded_passwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user_name = 1;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
    // optional string nonce = 2;
    if (has_nonce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nonce());
    }
    
    // optional string server_time = 3;
    if (has_server_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_time());
    }
    
    // optional string encode_type = 8;
    if (has_encode_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encode_type());
    }
    
    // optional string encoded_passwd = 9;
    if (has_encoded_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encoded_passwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_nonce()) {
      set_nonce(from.nonce());
    }
    if (from.has_server_time()) {
      set_server_time(from.server_time());
    }
    if (from.has_encode_type()) {
      set_encode_type(from.encode_type());
    }
    if (from.has_encoded_passwd()) {
      set_encoded_passwd(from.encoded_passwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(user_name_, other->user_name_);
    std::swap(nonce_, other->nonce_);
    std::swap(server_time_, other->server_time_);
    std::swap(encode_type_, other->encode_type_);
    std::swap(encoded_passwd_, other->encoded_passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResponse::kStatusFieldNumber;
const int LoginResponse::kSessionFieldNumber;
#endif  // !_MSC_VER

LoginResponse::LoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::cetty::protobuf::service::Status*>(&::cetty::protobuf::service::Status::default_instance());
  session_ = const_cast< ::cetty::protobuf::service::Session*>(&::cetty::protobuf::service::Session::default_instance());
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  session_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse() {
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
    delete session_;
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginResponse_descriptor_;
}

const LoginResponse& LoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fshiro_2fweb_2fauthentication_2eproto();  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New() const {
  return new LoginResponse;
}

void LoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::cetty::protobuf::service::Status::Clear();
    }
    if (has_session()) {
      if (session_ != NULL) session_->::cetty::protobuf::service::Session::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cetty.protobuf.service.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session;
        break;
      }
      
      // optional .cetty.protobuf.service.Session session = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cetty.protobuf.service.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  // optional .cetty.protobuf.service.Session session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->session(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cetty.protobuf.service.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  // optional .cetty.protobuf.service.Session session = 2;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->session(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cetty.protobuf.service.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
    // optional .cetty.protobuf.service.Session session = 2;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::cetty::protobuf::service::Status::MergeFrom(from.status());
    }
    if (from.has_session()) {
      mutable_session()->::cetty::protobuf::service::Session::MergeFrom(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginResponse_descriptor_;
  metadata.reflection = LoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutRequest::kSessionFieldNumber;
#endif  // !_MSC_VER

LogoutRequest::LogoutRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutRequest::InitAsDefaultInstance() {
  session_ = const_cast< ::cetty::protobuf::service::Session*>(&::cetty::protobuf::service::Session::default_instance());
}

LogoutRequest::LogoutRequest(const LogoutRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutRequest::SharedCtor() {
  _cached_size_ = 0;
  session_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutRequest::~LogoutRequest() {
  SharedDtor();
}

void LogoutRequest::SharedDtor() {
  if (this != default_instance_) {
    delete session_;
  }
}

void LogoutRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutRequest_descriptor_;
}

const LogoutRequest& LogoutRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fshiro_2fweb_2fauthentication_2eproto();  return *default_instance_;
}

LogoutRequest* LogoutRequest::default_instance_ = NULL;

LogoutRequest* LogoutRequest::New() const {
  return new LogoutRequest;
}

void LogoutRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session()) {
      if (session_ != NULL) session_->::cetty::protobuf::service::Session::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cetty.protobuf.service.Session session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cetty.protobuf.service.Session session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cetty.protobuf.service.Session session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cetty.protobuf.service.Session session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutRequest::MergeFrom(const LogoutRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      mutable_session()->::cetty::protobuf::service::Session::MergeFrom(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRequest::IsInitialized() const {
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void LogoutRequest::Swap(LogoutRequest* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutRequest_descriptor_;
  metadata.reflection = LogoutRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

LogoutResponse::LogoutResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::cetty::protobuf::service::Status*>(&::cetty::protobuf::service::Status::default_instance());
}

LogoutResponse::LogoutResponse(const LogoutResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutResponse::~LogoutResponse() {
  SharedDtor();
}

void LogoutResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void LogoutResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutResponse_descriptor_;
}

const LogoutResponse& LogoutResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cetty_2fshiro_2fweb_2fauthentication_2eproto();  return *default_instance_;
}

LogoutResponse* LogoutResponse::default_instance_ = NULL;

LogoutResponse* LogoutResponse::New() const {
  return new LogoutResponse;
}

void LogoutResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status()) {
      if (status_ != NULL) status_->::cetty::protobuf::service::Status::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cetty.protobuf.service.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cetty.protobuf.service.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cetty.protobuf.service.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cetty.protobuf.service.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutResponse::MergeFrom(const LogoutResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::cetty::protobuf::service::Status::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutResponse::CopyFrom(const LogoutResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutResponse::IsInitialized() const {
  
  return true;
}

void LogoutResponse::Swap(LogoutResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutResponse_descriptor_;
  metadata.reflection = LogoutResponse_reflection_;
  return metadata;
}


// ===================================================================

AuthenticationService::~AuthenticationService() {}

const ::google::protobuf::ServiceDescriptor* AuthenticationService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticationService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* AuthenticationService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthenticationService_descriptor_;
}

void AuthenticationService::preLogin(const ConstPreLoginRequestPtr& request,
                         const PreLoginResponsePtr& response,
                         const DoneCallback& done) {
  assert(0);
}

void AuthenticationService::login(const ConstLoginRequestPtr& request,
                         const LoginResponsePtr& response,
                         const DoneCallback& done) {
  assert(0);
}

void AuthenticationService::logout(const ConstLogoutRequestPtr& request,
                         const LogoutResponsePtr& response,
                         const DoneCallback& done) {
  assert(0);
}

void AuthenticationService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             const ::cetty::protobuf::service::ConstMessagePtr& request,
                             const ::cetty::protobuf::service::MessagePtr& response,
                             const DoneCallback& done) {
  GOOGLE_DCHECK_EQ(method->service(), AuthenticationService_descriptor_);
  switch(method->index()) {
    case 0:
      preLogin(static_cast< ConstPreLoginRequestPtr>(request),
             static_cast< PreLoginResponsePtr>(response),
             done);
      break;
    case 1:
      login(static_cast< ConstLoginRequestPtr>(request),
             static_cast< LoginResponsePtr>(response),
             done);
      break;
    case 2:
      logout(static_cast< ConstLogoutRequestPtr>(request),
             static_cast< LogoutResponsePtr>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message* AuthenticationService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return &::cetty::shiro::web::PreLoginRequest::default_instance();
    case 1:
      return &::cetty::shiro::web::LoginRequest::default_instance();
    case 2:
      return &::cetty::shiro::web::LogoutRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return NULL;
  }
}

const ::google::protobuf::Message* AuthenticationService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return &::cetty::shiro::web::PreLoginResponse::default_instance();
    case 1:
      return &::cetty::shiro::web::LoginResponse::default_instance();
    case 2:
      return &::cetty::shiro::web::LogoutResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return NULL;
  }
}

AuthenticationService_Stub::AuthenticationService_Stub(const cetty::service::ClientServicePtr& service)
  : channel_(service), owns_channel_(false) {
    static int init = 0;
    if (!init) {
        ::cetty::protobuf::service::ProtobufServiceRegister& serviceRegister =
            ::cetty::protobuf::service::ProtobufServiceRegister::instance();

       serviceRegister.registerResponsePrototype("cetty.shiro.web.AuthenticationService",
                                                 "preLogin",
                                                 &PreLoginResponse::default_instance());

       serviceRegister.registerResponsePrototype("cetty.shiro.web.AuthenticationService",
                                                 "login",
                                                 &LoginResponse::default_instance());

       serviceRegister.registerResponsePrototype("cetty.shiro.web.AuthenticationService",
                                                 "logout",
                                                 &LogoutResponse::default_instance());

        init = 1;
    }
}
AuthenticationService_Stub::~AuthenticationService_Stub() {
}

void AuthenticationService_Stub::preLogin(const ConstPreLoginRequestPtr& request,
                              const preLoginServiceFuturePtr& future) {
  channel_.CallMethod<ConstPreLoginRequestPtr, PreLoginResponsePtr>(descriptor()->method(0),
                                                              request,
                                                              future);
}
void AuthenticationService_Stub::login(const ConstLoginRequestPtr& request,
                              const loginServiceFuturePtr& future) {
  channel_.CallMethod<ConstLoginRequestPtr, LoginResponsePtr>(descriptor()->method(1),
                                                              request,
                                                              future);
}
void AuthenticationService_Stub::logout(const ConstLogoutRequestPtr& request,
                              const logoutServiceFuturePtr& future) {
  channel_.CallMethod<ConstLogoutRequestPtr, LogoutResponsePtr>(descriptor()->method(2),
                                                              request,
                                                              future);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace web
}  // namespace shiro
}  // namespace cetty

// @@protoc_insertion_point(global_scope)


