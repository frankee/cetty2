日志处理系统

* 日志系统子系统的划分
	 
** 日志收集
	 - 日志预处理
   - 多样化的日志收集方式
   - 对应用的性能影响最小

** 日志处理
   - 在线处理
   - 接收数据，并进行存储
   - 吞吐量高
   - 方便扩展
   - 存储量大
   - 可用性高

** 日志分析
   - 离线、在线日志分析
   - 关联分析
   - 统计报表与展现
   - 日志报警

  
* 日志收集
** 日志预处理
	 1, 由于各个日志格式不兼容，使用日志预处理统一日志格式，如下
	 日志header： 级别|时间|主机ip|进程号|模块名|filename|lineno
	 日志body:	 记录不同日志类型的特化信息,其中字段以 “|” （可配）分隔
	 2, 日志汇聚和过滤加工
	 可以在client端或者是scribe端进行过滤，待定
	 
** 日志收集的方式
   目前只用tail的方式收集日志文件，所以syslog，log4cplus等都要输出到指定文件
   
** 日志收集系统的监控
   用开源

** 日志收集系统的可用性分析（丢失日志信息的可能性）
	 1, 客户端不能连接到本地或中央server，message会丢失。
	 2, 一个scribe server down了，内存中少量的消息会丢失，磁盘上的数据不会丢失。
   3, Scribe server不能连接到中央server，本地磁盘溢出，消息会丢失。
   4, 超时，导致存在重复的消息


** 日志收集流程
   1，参考下图

** 日志格式
	 - 级别
   - 时间 *
   - 主机
   - 进程号
   - Source（日志来源）
   - Severity（INFO、WARN）*
   - filename
   - lineno
   - body
   
   其中body中记录的是特定日志类型的字段信息
   filename 与 lineno是为了程序debug定位

** 具体应用的日志收集
   1, Nginx
        - 输出日志文件名称：自定义
        - 输出日志文件格式要求：自定义
        - 日志文件收集处理：指定log输出文件

   2, Varnish
        和Nginx类似
        
   3, redis、mysql...
        和Nginx类似
        
   4, 应用程序（使用和Nginx相同方式）
        和Nginx类似


* 日志处理
** 日志的过滤
   1，应该能够通过配置文件进行日志的过滤处理
   		通过配置combiner，filter来对日志进行过滤

** 日志的存储
   1，日志采用集中式存储或是分应用存储？
   		分应用存储，易于分析和统计
   		
   2，存储采用MongoDB？Mysql？InfoBright
   		待定

* 日志分析
  1， HTTP接入数据的统计与分析，主要包括Nginx、Varnish
     - 用开源软件 待定
     		
  2， 应用程序的性能分析
     - 请求的响应统计，日报表，月报表
       用户响应最大延迟和平均延迟
       日志按月，日存储目录

  3， 应用服务器相关应用的分析
      - POI
        - 那些查询需要用户翻页
        - 查最多的热门词汇有哪些
      - ROUTE
        - 路径规划使用参数报表
        - 路径规划距离报表

	4，日志报警
  	 1, 对应用程序的错误日志消息报警
  	 2, 可以与监控服务器对接

  5，日志报表与查询
  	 前后端展示
		 用开源  待定


